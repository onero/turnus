{"version":3,"sources":["app.concat.js","app.js","controllers/main.js","routes/routes.js","services/lb-services.js"],"names":[],"mappingsfzMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtfile":"app.concat.js","sourcesContent":["var turnusApp = angular\n.module('turnusApp', ['ui.router', 'ngResource', 'lbServices'])\n.config(function(LoopBackResourceProvider) {\n    LoopBackResourceProvider.setUrlBase('https://turnus-server.herokuapp.com/api')\n  });\n\n'use strict';\r\n\r\nangular.module('turnusApp')\r\n  .controller('mainCtrl', function($scope, Member) {\r\n    function getMembers() {\r\n      $scope.members = Member.find();\r\n    }\r\n\r\n    //Reset data\r\n    $scope.reset = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        $scope.members[i].available1 = true;\r\n        $scope.members[i].available2 = true;\r\n        $scope.members[i].available3 = true;\r\n        $scope.members[i].available4 = true;\r\n        $scope.members[i].available5 = true;\r\n        $scope.members[i].chosen1 = false;\r\n        $scope.members[i].chosen2 = false;\r\n        $scope.members[i].chosen3 = false;\r\n        $scope.members[i].chosen4 = false;\r\n        $scope.members[i].chosen5 = false;\r\n        $scope.members[i].$save();\r\n        console.log('Reset')\r\n      }\r\n    }\r\n\r\n    //Select all available for event\r\n    $scope.selectAll1 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].available1 == true) {\r\n          $scope.members[i].chosen1 = true;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.unselectAll1 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].chosen1 == true) {\r\n          $scope.members[i].chosen1 = false;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.selectAll2 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].available2 == true) {\r\n          $scope.members[i].chosen2 = true;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.unselectAll2 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].chosen2 == true) {\r\n          $scope.members[i].chosen2 = false;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.selectAll3 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].available3 == true) {\r\n          $scope.members[i].chosen3 = true;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.unselectAll3 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].chosen3 == true) {\r\n          $scope.members[i].chosen3 = false;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.selectAll4 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].available4 == true) {\r\n          $scope.members[i].chosen4 = true;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.unselectAll4 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].chosen4 == true) {\r\n          $scope.members[i].chosen4 = false;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.selectAll5 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].available5 == true) {\r\n          $scope.members[i].chosen5 = true;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.unselectAll5 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].chosen5 == true) {\r\n          $scope.members[i].chosen5 = false;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    //Select not available\r\n    $scope.available1 = function available() {\r\n      this.member.available1 = !this.member.available1;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.available2 = function available() {\r\n      this.member.available2 = !this.member.available2;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.available3 = function available() {\r\n      this.member.available3 = !this.member.available3;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.available4 = function available() {\r\n      this.member.available4 = !this.member.available4;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.available5 = function available() {\r\n      this.member.available5 = !this.member.available5;\r\n      this.member.$save();\r\n    }\r\n\r\n    //Select people for event\r\n\r\n    $scope.chosen1 = function available() {\r\n      this.member.chosen1 = !this.member.chosen1;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.chosen2 = function available() {\r\n      this.member.chosen2 = !this.member.chosen2;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.chosen3 = function available() {\r\n      this.member.chosen3 = !this.member.chosen3;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.chosen4 = function available() {\r\n      this.member.chosen4 = !this.member.chosen4;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.chosen5 = function available() {\r\n      this.member.chosen5 = !this.member.chosen5;\r\n      this.member.$save();\r\n    }\r\n\r\n    //Clears the input fields on workers\r\n    function clearInput() {\r\n      $scope.member = {\r\n        firstname: '',\r\n        lastname: '',\r\n        position: ''\r\n      };\r\n    }\r\n\r\n\r\n    $scope.addMember = function addMember() {\r\n      var member = Member.create($scope.member);\r\n      $scope.members.push(Member)\r\n      getMembers();\r\n      clearInput();\r\n    }\r\n\r\n    $scope.removeMember = function removeMember() {\r\n      Member.deleteById({\r\n          id: this.member.id\r\n        })\r\n        .$promise\r\n        .then(function() {\r\n          getMembers();\r\n        });\r\n    }\r\n\r\n    //TODO updateMember\r\n    getMembers();\r\n\r\n  });\r\n\nturnusApp.config(function ($stateProvider, $urlRouterProvider) {\r\n\r\n  // For any unmatched url, redirect to /home\r\n $urlRouterProvider.otherwise(\"/home\");\r\n\r\n $stateProvider\r\n   .state('home', {\r\n     url: \"/home\",\r\n     templateUrl: \"views/home.html\",\r\n     controller: \"mainCtrl\"\r\n   })\r\n   .state('turnus', {\r\n     url: \"/turnus\",\r\n     templateUrl: \"views/turnus.html\",\r\n     controller: \"mainCtrl\"\r\n   })\r\n   .state('workers', {\r\n     url: \"/workers\",\r\n     templateUrl: \"views/workers.html\",\r\n     controller: \"mainCtrl\"\r\n   })\r\n});\r\n\n(function(window, angular, undefined) {'use strict';\n\nvar urlBase = \"/api\";\nvar authHeader = 'authorization';\n\nfunction getHost(url) {\n  var m = url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);\n  return m ? m[1] : null;\n}\n\nvar urlBaseHost = getHost(urlBase) || location.host;\n\n/**\n * @ngdoc overview\n * @name lbServices\n * @module\n * @description\n *\n * The `lbServices` module provides services for interacting with\n * the models exposed by the LoopBack server via the REST API.\n *\n */\nvar module = angular.module(\"lbServices\", ['ngResource']);\n\n/**\n * @ngdoc object\n * @name lbServices.User\n * @header lbServices.User\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `User` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\nmodule.factory(\n  \"User\",\n  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {\n    var R = Resource(\n      urlBase + \"/Users/:id\",\n      { 'id': '@id' },\n      {\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__findById__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find a related item by id for accessTokens.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `fk` – `{*}` - Foreign key for accessTokens\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__findById__accessTokens\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Users/:id/accessTokens/:fk\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__destroyById__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a related item by id for accessTokens.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `fk` – `{*}` - Foreign key for accessTokens\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"prototype$__destroyById__accessTokens\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Users/:id/accessTokens/:fk\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__updateById__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update a related item by id for accessTokens.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `fk` – `{*}` - Foreign key for accessTokens\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__updateById__accessTokens\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Users/:id/accessTokens/:fk\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__get__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Queries accessTokens of User.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `filter` – `{object=}` - \n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__get__accessTokens\": {\n          isArray: true,\n          url: urlBase + \"/Users/:id/accessTokens\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__create__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Creates a new instance in accessTokens of this model.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__create__accessTokens\": {\n          url: urlBase + \"/Users/:id/accessTokens\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__delete__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Deletes all accessTokens of this model.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"prototype$__delete__accessTokens\": {\n          url: urlBase + \"/Users/:id/accessTokens\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__count__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Counts accessTokens of User.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"prototype$__count__accessTokens\": {\n          url: urlBase + \"/Users/:id/accessTokens/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#create\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"create\": {\n          url: urlBase + \"/Users\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#createMany\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"createMany\": {\n          isArray: true,\n          url: urlBase + \"/Users\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#upsert\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"upsert\": {\n          url: urlBase + \"/Users\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#exists\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Check whether a model instance exists in the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `exists` – `{boolean=}` - \n         */\n        \"exists\": {\n          url: urlBase + \"/Users/:id/exists\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#findById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         *  - `filter` – `{object=}` - Filter defining fields and include\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"findById\": {\n          url: urlBase + \"/Users/:id\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#find\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find all instances of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"find\": {\n          isArray: true,\n          url: urlBase + \"/Users\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#findOne\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find first instance of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"findOne\": {\n          url: urlBase + \"/Users/findOne\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#updateAll\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        \"updateAll\": {\n          url: urlBase + \"/Users/update\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#deleteById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"deleteById\": {\n          url: urlBase + \"/Users/:id\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#count\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Count instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"count\": {\n          url: urlBase + \"/Users/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$updateAttributes\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update attributes for a model instance and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$updateAttributes\": {\n          url: urlBase + \"/Users/:id\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#createChangeStream\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Create a change stream.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `options` – `{object=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `changes` – `{ReadableStream=}` - \n         */\n        \"createChangeStream\": {\n          url: urlBase + \"/Users/change-stream\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#login\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Login a user with username/email and password.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.\n         *   Default value: `user`.\n         *\n         *  - `rememberMe` - `boolean` - Whether the authentication credentials\n         *     should be remembered in localStorage across app/browser restarts.\n         *     Default: `true`.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The response body contains properties of the AccessToken created on login.\n         * Depending on the value of `include` parameter, the body may contain additional properties:\n         * \n         *   - `user` - `{User}` - Data of the currently logged in user. (`include=user`)\n         * \n         *\n         */\n        \"login\": {\n          params: {\n            include: \"user\"\n          },\n          interceptor: {\n            response: function(response) {\n              var accessToken = response.data;\n              LoopBackAuth.setUser(accessToken.id, accessToken.userId, accessToken.user);\n              LoopBackAuth.rememberMe = response.config.params.rememberMe !== false;\n              LoopBackAuth.save();\n              return response.resource;\n            }\n          },\n          url: urlBase + \"/Users/login\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#logout\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Logout a user with access token.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"logout\": {\n          interceptor: {\n            response: function(response) {\n              LoopBackAuth.clearUser();\n              LoopBackAuth.clearStorage();\n              return response.resource;\n            }\n          },\n          url: urlBase + \"/Users/logout\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#confirm\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Confirm a user registration with email verification token.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `uid` – `{string}` - \n         *\n         *  - `token` – `{string}` - \n         *\n         *  - `redirect` – `{string=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"confirm\": {\n          url: urlBase + \"/Users/confirm\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#resetPassword\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Reset password for a user with email.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"resetPassword\": {\n          url: urlBase + \"/Users/reset\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#getCurrent\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Get data of the currently logged user. Fail with HTTP result 401\n         * when there is no user logged in.\n         *\n         * @param {function(Object,Object)=} successCb\n         *    Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *    `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         */\n        \"getCurrent\": {\n           url: urlBase + \"/Users\" + \"/:id\",\n           method: \"GET\",\n           params: {\n             id: function() {\n              var id = LoopBackAuth.currentUserId;\n              if (id == null) id = '__anonymous__';\n              return id;\n            },\n          },\n          interceptor: {\n            response: function(response) {\n              LoopBackAuth.currentUserData = response.data;\n              return response.resource;\n            }\n          },\n          __isGetCurrentUser__ : true\n        }\n      }\n    );\n\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#updateOrCreate\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        R[\"updateOrCreate\"] = R[\"upsert\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#update\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        R[\"update\"] = R[\"updateAll\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#destroyById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#removeById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#getCachedCurrent\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Get data of the currently logged user that was returned by the last\n         * call to {@link lbServices.User#login} or\n         * {@link lbServices.User#getCurrent}. Return null when there\n         * is no user logged in or the data of the current user were not fetched\n         * yet.\n         *\n         * @returns {Object} A User instance.\n         */\n        R.getCachedCurrent = function() {\n          var data = LoopBackAuth.currentUserData;\n          return data ? new R(data) : null;\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#isAuthenticated\n         * @methodOf lbServices.User\n         *\n         * @returns {boolean} True if the current user is authenticated (logged in).\n         */\n        R.isAuthenticated = function() {\n          return this.getCurrentId() != null;\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#getCurrentId\n         * @methodOf lbServices.User\n         *\n         * @returns {Object} Id of the currently logged-in user or null.\n         */\n        R.getCurrentId = function() {\n          return LoopBackAuth.currentUserId;\n        };\n\n    /**\n    * @ngdoc property\n    * @name lbServices.User#modelName\n    * @propertyOf lbServices.User\n    * @description\n    * The name of the model represented by this $resource,\n    * i.e. `User`.\n    */\n    R.modelName = \"User\";\n\n\n    return R;\n  }]);\n\n/**\n * @ngdoc object\n * @name lbServices.Person\n * @header lbServices.Person\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `Person` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\nmodule.factory(\n  \"Person\",\n  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {\n    var R = Resource(\n      urlBase + \"/people/:id\",\n      { 'id': '@id' },\n      {\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#create\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"create\": {\n          url: urlBase + \"/people\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#createMany\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"createMany\": {\n          isArray: true,\n          url: urlBase + \"/people\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#upsert\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"upsert\": {\n          url: urlBase + \"/people\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#exists\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Check whether a model instance exists in the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `exists` – `{boolean=}` - \n         */\n        \"exists\": {\n          url: urlBase + \"/people/:id/exists\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#findById\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Find a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         *  - `filter` – `{object=}` - Filter defining fields and include\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"findById\": {\n          url: urlBase + \"/people/:id\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#find\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Find all instances of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"find\": {\n          isArray: true,\n          url: urlBase + \"/people\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#findOne\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Find first instance of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"findOne\": {\n          url: urlBase + \"/people/findOne\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#updateAll\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        \"updateAll\": {\n          url: urlBase + \"/people/update\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#deleteById\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"deleteById\": {\n          url: urlBase + \"/people/:id\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#count\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Count instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"count\": {\n          url: urlBase + \"/people/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#prototype$updateAttributes\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Update attributes for a model instance and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"prototype$updateAttributes\": {\n          url: urlBase + \"/people/:id\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#createChangeStream\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Create a change stream.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `options` – `{object=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `changes` – `{ReadableStream=}` - \n         */\n        \"createChangeStream\": {\n          url: urlBase + \"/people/change-stream\",\n          method: \"POST\"\n        },\n      }\n    );\n\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#updateOrCreate\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        R[\"updateOrCreate\"] = R[\"upsert\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#update\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        R[\"update\"] = R[\"updateAll\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#destroyById\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#removeById\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n\n    /**\n    * @ngdoc property\n    * @name lbServices.Person#modelName\n    * @propertyOf lbServices.Person\n    * @description\n    * The name of the model represented by this $resource,\n    * i.e. `Person`.\n    */\n    R.modelName = \"Person\";\n\n\n    return R;\n  }]);\n\n/**\n * @ngdoc object\n * @name lbServices.Member\n * @header lbServices.Member\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `Member` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\nmodule.factory(\n  \"Member\",\n  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {\n    var R = Resource(\n      urlBase + \"/Members/:id\",\n      { 'id': '@id' },\n      {\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#create\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"create\": {\n          url: urlBase + \"/Members\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#createMany\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"createMany\": {\n          isArray: true,\n          url: urlBase + \"/Members\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#upsert\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"upsert\": {\n          url: urlBase + \"/Members\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#exists\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Check whether a model instance exists in the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `exists` – `{boolean=}` - \n         */\n        \"exists\": {\n          url: urlBase + \"/Members/:id/exists\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#findById\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Find a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         *  - `filter` – `{object=}` - Filter defining fields and include\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"findById\": {\n          url: urlBase + \"/Members/:id\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#find\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Find all instances of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"find\": {\n          isArray: true,\n          url: urlBase + \"/Members\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#findOne\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Find first instance of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"findOne\": {\n          url: urlBase + \"/Members/findOne\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#updateAll\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        \"updateAll\": {\n          url: urlBase + \"/Members/update\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#deleteById\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"deleteById\": {\n          url: urlBase + \"/Members/:id\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#count\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Count instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"count\": {\n          url: urlBase + \"/Members/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#prototype$updateAttributes\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Update attributes for a model instance and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"prototype$updateAttributes\": {\n          url: urlBase + \"/Members/:id\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#createChangeStream\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Create a change stream.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `options` – `{object=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `changes` – `{ReadableStream=}` - \n         */\n        \"createChangeStream\": {\n          url: urlBase + \"/Members/change-stream\",\n          method: \"POST\"\n        },\n      }\n    );\n\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#updateOrCreate\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        R[\"updateOrCreate\"] = R[\"upsert\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#update\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        R[\"update\"] = R[\"updateAll\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#destroyById\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#removeById\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n\n    /**\n    * @ngdoc property\n    * @name lbServices.Member#modelName\n    * @propertyOf lbServices.Member\n    * @description\n    * The name of the model represented by this $resource,\n    * i.e. `Member`.\n    */\n    R.modelName = \"Member\";\n\n\n    return R;\n  }]);\n\n\nmodule\n  .factory('LoopBackAuth', function() {\n    var props = ['accessTokenId', 'currentUserId', 'rememberMe'];\n    var propsPrefix = '$LoopBack$';\n\n    function LoopBackAuth() {\n      var self = this;\n      props.forEach(function(name) {\n        self[name] = load(name);\n      });\n      this.currentUserData = null;\n    }\n\n    LoopBackAuth.prototype.save = function() {\n      var self = this;\n      var storage = this.rememberMe ? localStorage : sessionStorage;\n      props.forEach(function(name) {\n        save(storage, name, self[name]);\n      });\n    };\n\n    LoopBackAuth.prototype.setUser = function(accessTokenId, userId, userData) {\n      this.accessTokenId = accessTokenId;\n      this.currentUserId = userId;\n      this.currentUserData = userData;\n    }\n\n    LoopBackAuth.prototype.clearUser = function() {\n      this.accessTokenId = null;\n      this.currentUserId = null;\n      this.currentUserData = null;\n    }\n\n    LoopBackAuth.prototype.clearStorage = function() {\n      props.forEach(function(name) {\n        save(sessionStorage, name, null);\n        save(localStorage, name, null);\n      });\n    };\n\n    return new LoopBackAuth();\n\n    // Note: LocalStorage converts the value to string\n    // We are using empty string as a marker for null/undefined values.\n    function save(storage, name, value) {\n      var key = propsPrefix + name;\n      if (value == null) value = '';\n      storage[key] = value;\n    }\n\n    function load(name) {\n      var key = propsPrefix + name;\n      return localStorage[key] || sessionStorage[key] || null;\n    }\n  })\n  .config(['$httpProvider', function($httpProvider) {\n    $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');\n  }])\n  .factory('LoopBackAuthRequestInterceptor', [ '$q', 'LoopBackAuth',\n    function($q, LoopBackAuth) {\n      return {\n        'request': function(config) {\n\n          // filter out external requests\n          var host = getHost(config.url);\n          if (host && host !== urlBaseHost) {\n            return config;\n          }\n\n          if (LoopBackAuth.accessTokenId) {\n            config.headers[authHeader] = LoopBackAuth.accessTokenId;\n          } else if (config.__isGetCurrentUser__) {\n            // Return a stub 401 error for User.getCurrent() when\n            // there is no user logged in\n            var res = {\n              body: { error: { status: 401 } },\n              status: 401,\n              config: config,\n              headers: function() { return undefined; }\n            };\n            return $q.reject(res);\n          }\n          return config || $q.when(config);\n        }\n      }\n    }])\n\n  /**\n   * @ngdoc object\n   * @name lbServices.LoopBackResourceProvider\n   * @header lbServices.LoopBackResourceProvider\n   * @description\n   * Use `LoopBackResourceProvider` to change the global configuration\n   * settings used by all models. Note that the provider is available\n   * to Configuration Blocks only, see\n   * {@link https://docs.angularjs.org/guide/module#module-loading-dependencies Module Loading & Dependencies}\n   * for more details.\n   *\n   * ## Example\n   *\n   * ```js\n   * angular.module('app')\n   *  .config(function(LoopBackResourceProvider) {\n   *     LoopBackResourceProvider.setAuthHeader('X-Access-Token');\n   *  });\n   * ```\n   */\n  .provider('LoopBackResource', function LoopBackResourceProvider() {\n    /**\n     * @ngdoc method\n     * @name lbServices.LoopBackResourceProvider#setAuthHeader\n     * @methodOf lbServices.LoopBackResourceProvider\n     * @param {string} header The header name to use, e.g. `X-Access-Token`\n     * @description\n     * Configure the REST transport to use a different header for sending\n     * the authentication token. It is sent in the `Authorization` header\n     * by default.\n     */\n    this.setAuthHeader = function(header) {\n      authHeader = header;\n    };\n\n    /**\n     * @ngdoc method\n     * @name lbServices.LoopBackResourceProvider#setUrlBase\n     * @methodOf lbServices.LoopBackResourceProvider\n     * @param {string} url The URL to use, e.g. `/api` or `//example.com/api`.\n     * @description\n     * Change the URL of the REST API server. By default, the URL provided\n     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.\n     */\n    this.setUrlBase = function(url) {\n      urlBase = url;\n      urlBaseHost = getHost(urlBase) || location.host;\n    };\n\n    /**\n     * @ngdoc method\n     * @name lbServices.LoopBackResourceProvider#getUrlBase\n     * @methodOf lbServices.LoopBackResourceProvider\n     * @description\n     * Get the URL of the REST API server. The URL provided\n     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.\n     */\n    this.getUrlBase = function() {\n      return urlBase;\n    };\n\n    this.$get = ['$resource', function($resource) {\n      return function(url, params, actions) {\n        var resource = $resource(url, params, actions);\n\n        // Angular always calls POST on $save()\n        // This hack is based on\n        // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/\n        resource.prototype.$save = function(success, error) {\n          // Fortunately, LoopBack provides a convenient `upsert` method\n          // that exactly fits our needs.\n          var result = resource.upsert.call(this, {}, this, success, error);\n          return result.$promise || result;\n        };\n        return resource;\n      };\n    }];\n  });\n\n})(window, window.angular);\n\n//# sourceMappingURL=app.concat.js.map\n\nvar turnusApp = angular\n.module('turnusApp', ['ui.router', 'ngResource', 'lbServices'])\n.config(function(LoopBackResourceProvider) {\n    LoopBackResourceProvider.setUrlBase('https://turnus-server.herokuapp.com/api')\n  });\n\n'use strict';\r\n\r\nangular.module('turnusApp')\r\n  .controller('mainCtrl', function($scope, Member) {\r\n    function getMembers() {\r\n      $scope.members = Member.find();\r\n    }\r\n\r\n    //Reset data\r\n    $scope.reset = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        $scope.members[i].available1 = true;\r\n        $scope.members[i].available2 = true;\r\n        $scope.members[i].available3 = true;\r\n        $scope.members[i].available4 = true;\r\n        $scope.members[i].available5 = true;\r\n        $scope.members[i].chosen1 = false;\r\n        $scope.members[i].chosen2 = false;\r\n        $scope.members[i].chosen3 = false;\r\n        $scope.members[i].chosen4 = false;\r\n        $scope.members[i].chosen5 = false;\r\n        $scope.members[i].$save();\r\n        console.log('Reset')\r\n      }\r\n    }\r\n\r\n    //Select all available for event\r\n    $scope.selectAll1 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].available1 == true) {\r\n          $scope.members[i].chosen1 = true;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.unselectAll1 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].chosen1 == true) {\r\n          $scope.members[i].chosen1 = false;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.selectAll2 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].available2 == true) {\r\n          $scope.members[i].chosen2 = true;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.unselectAll2 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].chosen2 == true) {\r\n          $scope.members[i].chosen2 = false;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.selectAll3 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].available3 == true) {\r\n          $scope.members[i].chosen3 = true;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.unselectAll3 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].chosen3 == true) {\r\n          $scope.members[i].chosen3 = false;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.selectAll4 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].available4 == true) {\r\n          $scope.members[i].chosen4 = true;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.unselectAll4 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].chosen4 == true) {\r\n          $scope.members[i].chosen4 = false;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.selectAll5 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].available5 == true) {\r\n          $scope.members[i].chosen5 = true;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.unselectAll5 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].chosen5 == true) {\r\n          $scope.members[i].chosen5 = false;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    //Select not available\r\n    $scope.available1 = function available() {\r\n      this.member.available1 = !this.member.available1;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.available2 = function available() {\r\n      this.member.available2 = !this.member.available2;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.available3 = function available() {\r\n      this.member.available3 = !this.member.available3;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.available4 = function available() {\r\n      this.member.available4 = !this.member.available4;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.available5 = function available() {\r\n      this.member.available5 = !this.member.available5;\r\n      this.member.$save();\r\n    }\r\n\r\n    //Select people for event\r\n\r\n    $scope.chosen1 = function available() {\r\n      this.member.chosen1 = !this.member.chosen1;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.chosen2 = function available() {\r\n      this.member.chosen2 = !this.member.chosen2;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.chosen3 = function available() {\r\n      this.member.chosen3 = !this.member.chosen3;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.chosen4 = function available() {\r\n      this.member.chosen4 = !this.member.chosen4;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.chosen5 = function available() {\r\n      this.member.chosen5 = !this.member.chosen5;\r\n      this.member.$save();\r\n    }\r\n\r\n    //Clears the input fields on workers\r\n    function clearInput() {\r\n      $scope.member = {\r\n        firstname: '',\r\n        lastname: '',\r\n        position: ''\r\n      };\r\n    }\r\n\r\n\r\n    $scope.addMember = function addMember() {\r\n      var member = Member.create($scope.member);\r\n      $scope.members.push(Member)\r\n      getMembers();\r\n      clearInput();\r\n    }\r\n\r\n    $scope.removeMember = function removeMember() {\r\n      Member.deleteById({\r\n          id: this.member.id\r\n        })\r\n        .$promise\r\n        .then(function() {\r\n          getMembers();\r\n        });\r\n    }\r\n\r\n    //TODO updateMember\r\n    getMembers();\r\n\r\n  });\r\n\nturnusApp.config(function ($stateProvider, $urlRouterProvider) {\r\n\r\n  // For any unmatched url, redirect to /home\r\n $urlRouterProvider.otherwise(\"/home\");\r\n\r\n $stateProvider\r\n   .state('home', {\r\n     url: \"/home\",\r\n     templateUrl: \"views/home.html\",\r\n     controller: \"mainCtrl\"\r\n   })\r\n   .state('turnus', {\r\n     url: \"/turnus\",\r\n     templateUrl: \"views/turnus.html\",\r\n     controller: \"mainCtrl\"\r\n   })\r\n   .state('workers', {\r\n     url: \"/workers\",\r\n     templateUrl: \"views/workers.html\",\r\n     controller: \"mainCtrl\"\r\n   })\r\n});\r\n\n(function(window, angular, undefined) {'use strict';\n\nvar urlBase = \"/api\";\nvar authHeader = 'authorization';\n\nfunction getHost(url) {\n  var m = url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);\n  return m ? m[1] : null;\n}\n\nvar urlBaseHost = getHost(urlBase) || location.host;\n\n/**\n * @ngdoc overview\n * @name lbServices\n * @module\n * @description\n *\n * The `lbServices` module provides services for interacting with\n * the models exposed by the LoopBack server via the REST API.\n *\n */\nvar module = angular.module(\"lbServices\", ['ngResource']);\n\n/**\n * @ngdoc object\n * @name lbServices.User\n * @header lbServices.User\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `User` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\nmodule.factory(\n  \"User\",\n  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {\n    var R = Resource(\n      urlBase + \"/Users/:id\",\n      { 'id': '@id' },\n      {\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__findById__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find a related item by id for accessTokens.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `fk` – `{*}` - Foreign key for accessTokens\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__findById__accessTokens\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Users/:id/accessTokens/:fk\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__destroyById__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a related item by id for accessTokens.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `fk` – `{*}` - Foreign key for accessTokens\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"prototype$__destroyById__accessTokens\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Users/:id/accessTokens/:fk\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__updateById__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update a related item by id for accessTokens.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `fk` – `{*}` - Foreign key for accessTokens\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__updateById__accessTokens\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Users/:id/accessTokens/:fk\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__get__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Queries accessTokens of User.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `filter` – `{object=}` - \n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__get__accessTokens\": {\n          isArray: true,\n          url: urlBase + \"/Users/:id/accessTokens\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__create__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Creates a new instance in accessTokens of this model.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__create__accessTokens\": {\n          url: urlBase + \"/Users/:id/accessTokens\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__delete__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Deletes all accessTokens of this model.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"prototype$__delete__accessTokens\": {\n          url: urlBase + \"/Users/:id/accessTokens\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__count__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Counts accessTokens of User.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"prototype$__count__accessTokens\": {\n          url: urlBase + \"/Users/:id/accessTokens/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#create\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"create\": {\n          url: urlBase + \"/Users\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#createMany\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"createMany\": {\n          isArray: true,\n          url: urlBase + \"/Users\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#upsert\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"upsert\": {\n          url: urlBase + \"/Users\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#exists\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Check whether a model instance exists in the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `exists` – `{boolean=}` - \n         */\n        \"exists\": {\n          url: urlBase + \"/Users/:id/exists\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#findById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         *  - `filter` – `{object=}` - Filter defining fields and include\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"findById\": {\n          url: urlBase + \"/Users/:id\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#find\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find all instances of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"find\": {\n          isArray: true,\n          url: urlBase + \"/Users\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#findOne\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find first instance of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"findOne\": {\n          url: urlBase + \"/Users/findOne\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#updateAll\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        \"updateAll\": {\n          url: urlBase + \"/Users/update\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#deleteById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"deleteById\": {\n          url: urlBase + \"/Users/:id\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#count\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Count instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"count\": {\n          url: urlBase + \"/Users/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$updateAttributes\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update attributes for a model instance and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$updateAttributes\": {\n          url: urlBase + \"/Users/:id\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#createChangeStream\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Create a change stream.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `options` – `{object=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `changes` – `{ReadableStream=}` - \n         */\n        \"createChangeStream\": {\n          url: urlBase + \"/Users/change-stream\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#login\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Login a user with username/email and password.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.\n         *   Default value: `user`.\n         *\n         *  - `rememberMe` - `boolean` - Whether the authentication credentials\n         *     should be remembered in localStorage across app/browser restarts.\n         *     Default: `true`.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The response body contains properties of the AccessToken created on login.\n         * Depending on the value of `include` parameter, the body may contain additional properties:\n         * \n         *   - `user` - `{User}` - Data of the currently logged in user. (`include=user`)\n         * \n         *\n         */\n        \"login\": {\n          params: {\n            include: \"user\"\n          },\n          interceptor: {\n            response: function(response) {\n              var accessToken = response.data;\n              LoopBackAuth.setUser(accessToken.id, accessToken.userId, accessToken.user);\n              LoopBackAuth.rememberMe = response.config.params.rememberMe !== false;\n              LoopBackAuth.save();\n              return response.resource;\n            }\n          },\n          url: urlBase + \"/Users/login\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#logout\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Logout a user with access token.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"logout\": {\n          interceptor: {\n            response: function(response) {\n              LoopBackAuth.clearUser();\n              LoopBackAuth.clearStorage();\n              return response.resource;\n            }\n          },\n          url: urlBase + \"/Users/logout\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#confirm\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Confirm a user registration with email verification token.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `uid` – `{string}` - \n         *\n         *  - `token` – `{string}` - \n         *\n         *  - `redirect` – `{string=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"confirm\": {\n          url: urlBase + \"/Users/confirm\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#resetPassword\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Reset password for a user with email.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"resetPassword\": {\n          url: urlBase + \"/Users/reset\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#getCurrent\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Get data of the currently logged user. Fail with HTTP result 401\n         * when there is no user logged in.\n         *\n         * @param {function(Object,Object)=} successCb\n         *    Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *    `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         */\n        \"getCurrent\": {\n           url: urlBase + \"/Users\" + \"/:id\",\n           method: \"GET\",\n           params: {\n             id: function() {\n              var id = LoopBackAuth.currentUserId;\n              if (id == null) id = '__anonymous__';\n              return id;\n            },\n          },\n          interceptor: {\n            response: function(response) {\n              LoopBackAuth.currentUserData = response.data;\n              return response.resource;\n            }\n          },\n          __isGetCurrentUser__ : true\n        }\n      }\n    );\n\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#updateOrCreate\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        R[\"updateOrCreate\"] = R[\"upsert\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#update\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        R[\"update\"] = R[\"updateAll\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#destroyById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#removeById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#getCachedCurrent\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Get data of the currently logged user that was returned by the last\n         * call to {@link lbServices.User#login} or\n         * {@link lbServices.User#getCurrent}. Return null when there\n         * is no user logged in or the data of the current user were not fetched\n         * yet.\n         *\n         * @returns {Object} A User instance.\n         */\n        R.getCachedCurrent = function() {\n          var data = LoopBackAuth.currentUserData;\n          return data ? new R(data) : null;\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#isAuthenticated\n         * @methodOf lbServices.User\n         *\n         * @returns {boolean} True if the current user is authenticated (logged in).\n         */\n        R.isAuthenticated = function() {\n          return this.getCurrentId() != null;\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#getCurrentId\n         * @methodOf lbServices.User\n         *\n         * @returns {Object} Id of the currently logged-in user or null.\n         */\n        R.getCurrentId = function() {\n          return LoopBackAuth.currentUserId;\n        };\n\n    /**\n    * @ngdoc property\n    * @name lbServices.User#modelName\n    * @propertyOf lbServices.User\n    * @description\n    * The name of the model represented by this $resource,\n    * i.e. `User`.\n    */\n    R.modelName = \"User\";\n\n\n    return R;\n  }]);\n\n/**\n * @ngdoc object\n * @name lbServices.Person\n * @header lbServices.Person\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `Person` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\nmodule.factory(\n  \"Person\",\n  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {\n    var R = Resource(\n      urlBase + \"/people/:id\",\n      { 'id': '@id' },\n      {\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#create\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"create\": {\n          url: urlBase + \"/people\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#createMany\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"createMany\": {\n          isArray: true,\n          url: urlBase + \"/people\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#upsert\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"upsert\": {\n          url: urlBase + \"/people\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#exists\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Check whether a model instance exists in the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `exists` – `{boolean=}` - \n         */\n        \"exists\": {\n          url: urlBase + \"/people/:id/exists\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#findById\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Find a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         *  - `filter` – `{object=}` - Filter defining fields and include\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"findById\": {\n          url: urlBase + \"/people/:id\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#find\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Find all instances of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"find\": {\n          isArray: true,\n          url: urlBase + \"/people\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#findOne\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Find first instance of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"findOne\": {\n          url: urlBase + \"/people/findOne\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#updateAll\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        \"updateAll\": {\n          url: urlBase + \"/people/update\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#deleteById\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"deleteById\": {\n          url: urlBase + \"/people/:id\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#count\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Count instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"count\": {\n          url: urlBase + \"/people/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#prototype$updateAttributes\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Update attributes for a model instance and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"prototype$updateAttributes\": {\n          url: urlBase + \"/people/:id\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#createChangeStream\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Create a change stream.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `options` – `{object=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `changes` – `{ReadableStream=}` - \n         */\n        \"createChangeStream\": {\n          url: urlBase + \"/people/change-stream\",\n          method: \"POST\"\n        },\n      }\n    );\n\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#updateOrCreate\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        R[\"updateOrCreate\"] = R[\"upsert\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#update\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        R[\"update\"] = R[\"updateAll\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#destroyById\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#removeById\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n\n    /**\n    * @ngdoc property\n    * @name lbServices.Person#modelName\n    * @propertyOf lbServices.Person\n    * @description\n    * The name of the model represented by this $resource,\n    * i.e. `Person`.\n    */\n    R.modelName = \"Person\";\n\n\n    return R;\n  }]);\n\n/**\n * @ngdoc object\n * @name lbServices.Member\n * @header lbServices.Member\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `Member` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\nmodule.factory(\n  \"Member\",\n  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {\n    var R = Resource(\n      urlBase + \"/Members/:id\",\n      { 'id': '@id' },\n      {\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#create\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"create\": {\n          url: urlBase + \"/Members\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#createMany\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"createMany\": {\n          isArray: true,\n          url: urlBase + \"/Members\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#upsert\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"upsert\": {\n          url: urlBase + \"/Members\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#exists\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Check whether a model instance exists in the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `exists` – `{boolean=}` - \n         */\n        \"exists\": {\n          url: urlBase + \"/Members/:id/exists\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#findById\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Find a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         *  - `filter` – `{object=}` - Filter defining fields and include\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"findById\": {\n          url: urlBase + \"/Members/:id\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#find\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Find all instances of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"find\": {\n          isArray: true,\n          url: urlBase + \"/Members\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#findOne\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Find first instance of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"findOne\": {\n          url: urlBase + \"/Members/findOne\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#updateAll\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        \"updateAll\": {\n          url: urlBase + \"/Members/update\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#deleteById\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"deleteById\": {\n          url: urlBase + \"/Members/:id\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#count\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Count instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"count\": {\n          url: urlBase + \"/Members/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#prototype$updateAttributes\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Update attributes for a model instance and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"prototype$updateAttributes\": {\n          url: urlBase + \"/Members/:id\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#createChangeStream\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Create a change stream.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `options` – `{object=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `changes` – `{ReadableStream=}` - \n         */\n        \"createChangeStream\": {\n          url: urlBase + \"/Members/change-stream\",\n          method: \"POST\"\n        },\n      }\n    );\n\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#updateOrCreate\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        R[\"updateOrCreate\"] = R[\"upsert\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#update\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        R[\"update\"] = R[\"updateAll\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#destroyById\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#removeById\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n\n    /**\n    * @ngdoc property\n    * @name lbServices.Member#modelName\n    * @propertyOf lbServices.Member\n    * @description\n    * The name of the model represented by this $resource,\n    * i.e. `Member`.\n    */\n    R.modelName = \"Member\";\n\n\n    return R;\n  }]);\n\n\nmodule\n  .factory('LoopBackAuth', function() {\n    var props = ['accessTokenId', 'currentUserId', 'rememberMe'];\n    var propsPrefix = '$LoopBack$';\n\n    function LoopBackAuth() {\n      var self = this;\n      props.forEach(function(name) {\n        self[name] = load(name);\n      });\n      this.currentUserData = null;\n    }\n\n    LoopBackAuth.prototype.save = function() {\n      var self = this;\n      var storage = this.rememberMe ? localStorage : sessionStorage;\n      props.forEach(function(name) {\n        save(storage, name, self[name]);\n      });\n    };\n\n    LoopBackAuth.prototype.setUser = function(accessTokenId, userId, userData) {\n      this.accessTokenId = accessTokenId;\n      this.currentUserId = userId;\n      this.currentUserData = userData;\n    }\n\n    LoopBackAuth.prototype.clearUser = function() {\n      this.accessTokenId = null;\n      this.currentUserId = null;\n      this.currentUserData = null;\n    }\n\n    LoopBackAuth.prototype.clearStorage = function() {\n      props.forEach(function(name) {\n        save(sessionStorage, name, null);\n        save(localStorage, name, null);\n      });\n    };\n\n    return new LoopBackAuth();\n\n    // Note: LocalStorage converts the value to string\n    // We are using empty string as a marker for null/undefined values.\n    function save(storage, name, value) {\n      var key = propsPrefix + name;\n      if (value == null) value = '';\n      storage[key] = value;\n    }\n\n    function load(name) {\n      var key = propsPrefix + name;\n      return localStorage[key] || sessionStorage[key] || null;\n    }\n  })\n  .config(['$httpProvider', function($httpProvider) {\n    $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');\n  }])\n  .factory('LoopBackAuthRequestInterceptor', [ '$q', 'LoopBackAuth',\n    function($q, LoopBackAuth) {\n      return {\n        'request': function(config) {\n\n          // filter out external requests\n          var host = getHost(config.url);\n          if (host && host !== urlBaseHost) {\n            return config;\n          }\n\n          if (LoopBackAuth.accessTokenId) {\n            config.headers[authHeader] = LoopBackAuth.accessTokenId;\n          } else if (config.__isGetCurrentUser__) {\n            // Return a stub 401 error for User.getCurrent() when\n            // there is no user logged in\n            var res = {\n              body: { error: { status: 401 } },\n              status: 401,\n              config: config,\n              headers: function() { return undefined; }\n            };\n            return $q.reject(res);\n          }\n          return config || $q.when(config);\n        }\n      }\n    }])\n\n  /**\n   * @ngdoc object\n   * @name lbServices.LoopBackResourceProvider\n   * @header lbServices.LoopBackResourceProvider\n   * @description\n   * Use `LoopBackResourceProvider` to change the global configuration\n   * settings used by all models. Note that the provider is available\n   * to Configuration Blocks only, see\n   * {@link https://docs.angularjs.org/guide/module#module-loading-dependencies Module Loading & Dependencies}\n   * for more details.\n   *\n   * ## Example\n   *\n   * ```js\n   * angular.module('app')\n   *  .config(function(LoopBackResourceProvider) {\n   *     LoopBackResourceProvider.setAuthHeader('X-Access-Token');\n   *  });\n   * ```\n   */\n  .provider('LoopBackResource', function LoopBackResourceProvider() {\n    /**\n     * @ngdoc method\n     * @name lbServices.LoopBackResourceProvider#setAuthHeader\n     * @methodOf lbServices.LoopBackResourceProvider\n     * @param {string} header The header name to use, e.g. `X-Access-Token`\n     * @description\n     * Configure the REST transport to use a different header for sending\n     * the authentication token. It is sent in the `Authorization` header\n     * by default.\n     */\n    this.setAuthHeader = function(header) {\n      authHeader = header;\n    };\n\n    /**\n     * @ngdoc method\n     * @name lbServices.LoopBackResourceProvider#setUrlBase\n     * @methodOf lbServices.LoopBackResourceProvider\n     * @param {string} url The URL to use, e.g. `/api` or `//example.com/api`.\n     * @description\n     * Change the URL of the REST API server. By default, the URL provided\n     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.\n     */\n    this.setUrlBase = function(url) {\n      urlBase = url;\n      urlBaseHost = getHost(urlBase) || location.host;\n    };\n\n    /**\n     * @ngdoc method\n     * @name lbServices.LoopBackResourceProvider#getUrlBase\n     * @methodOf lbServices.LoopBackResourceProvider\n     * @description\n     * Get the URL of the REST API server. The URL provided\n     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.\n     */\n    this.getUrlBase = function() {\n      return urlBase;\n    };\n\n    this.$get = ['$resource', function($resource) {\n      return function(url, params, actions) {\n        var resource = $resource(url, params, actions);\n\n        // Angular always calls POST on $save()\n        // This hack is based on\n        // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/\n        resource.prototype.$save = function(success, error) {\n          // Fortunately, LoopBack provides a convenient `upsert` method\n          // that exactly fits our needs.\n          var result = resource.upsert.call(this, {}, this, success, error);\n          return result.$promise || result;\n        };\n        return resource;\n      };\n    }];\n  });\n\n})(window, window.angular);\n\n//# sourceMappingURL=app.concat.js.map\n\nvar turnusApp = angular\n.module('turnusApp', ['ui.router', 'ngResource', 'lbServices'])\n.config(function(LoopBackResourceProvider) {\n    LoopBackResourceProvider.setUrlBase('https://turnus-server.herokuapp.com/api')\n  });\n\nvar turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")});angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member);$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular);var turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")});angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member);$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular);\n'use strict';\r\n\r\nangular.module('turnusApp')\r\n  .controller('mainCtrl', function($scope, Member) {\r\n    function getMembers() {\r\n      $scope.members = Member.find();\r\n    }\r\n\r\n    //Reset data\r\n    $scope.reset = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        $scope.members[i].available1 = true;\r\n        $scope.members[i].available2 = true;\r\n        $scope.members[i].available3 = true;\r\n        $scope.members[i].available4 = true;\r\n        $scope.members[i].available5 = true;\r\n        $scope.members[i].chosen1 = false;\r\n        $scope.members[i].chosen2 = false;\r\n        $scope.members[i].chosen3 = false;\r\n        $scope.members[i].chosen4 = false;\r\n        $scope.members[i].chosen5 = false;\r\n        $scope.members[i].$save();\r\n        console.log('Reset')\r\n      }\r\n    }\r\n\r\n    //Select all available for event\r\n    $scope.selectAll1 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].available1 == true) {\r\n          $scope.members[i].chosen1 = true;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.unselectAll1 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].chosen1 == true) {\r\n          $scope.members[i].chosen1 = false;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.selectAll2 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].available2 == true) {\r\n          $scope.members[i].chosen2 = true;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.unselectAll2 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].chosen2 == true) {\r\n          $scope.members[i].chosen2 = false;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.selectAll3 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].available3 == true) {\r\n          $scope.members[i].chosen3 = true;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.unselectAll3 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].chosen3 == true) {\r\n          $scope.members[i].chosen3 = false;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.selectAll4 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].available4 == true) {\r\n          $scope.members[i].chosen4 = true;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.unselectAll4 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].chosen4 == true) {\r\n          $scope.members[i].chosen4 = false;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.selectAll5 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].available5 == true) {\r\n          $scope.members[i].chosen5 = true;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.unselectAll5 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].chosen5 == true) {\r\n          $scope.members[i].chosen5 = false;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    //Select not available\r\n    $scope.available1 = function available() {\r\n      this.member.available1 = !this.member.available1;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.available2 = function available() {\r\n      this.member.available2 = !this.member.available2;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.available3 = function available() {\r\n      this.member.available3 = !this.member.available3;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.available4 = function available() {\r\n      this.member.available4 = !this.member.available4;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.available5 = function available() {\r\n      this.member.available5 = !this.member.available5;\r\n      this.member.$save();\r\n    }\r\n\r\n    //Select people for event\r\n\r\n    $scope.chosen1 = function available() {\r\n      this.member.chosen1 = !this.member.chosen1;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.chosen2 = function available() {\r\n      this.member.chosen2 = !this.member.chosen2;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.chosen3 = function available() {\r\n      this.member.chosen3 = !this.member.chosen3;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.chosen4 = function available() {\r\n      this.member.chosen4 = !this.member.chosen4;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.chosen5 = function available() {\r\n      this.member.chosen5 = !this.member.chosen5;\r\n      this.member.$save();\r\n    }\r\n\r\n    //Clears the input fields on workers\r\n    function clearInput() {\r\n      $scope.member = {\r\n        firstname: '',\r\n        lastname: '',\r\n        position: ''\r\n      };\r\n    }\r\n\r\n\r\n    $scope.addMember = function addMember() {\r\n      var member = Member.create($scope.member);\r\n      $scope.members.push(Member)\r\n      getMembers();\r\n      clearInput();\r\n    }\r\n\r\n    $scope.removeMember = function removeMember() {\r\n      Member.deleteById({\r\n          id: this.member.id\r\n        })\r\n        .$promise\r\n        .then(function() {\r\n          getMembers();\r\n        });\r\n    }\r\n\r\n    //TODO updateMember\r\n    getMembers();\r\n\r\n  });\r\n\nturnusApp.config(function ($stateProvider, $urlRouterProvider) {\r\n\r\n  // For any unmatched url, redirect to /home\r\n $urlRouterProvider.otherwise(\"/home\");\r\n\r\n $stateProvider\r\n   .state('home', {\r\n     url: \"/home\",\r\n     templateUrl: \"views/home.html\",\r\n     controller: \"mainCtrl\"\r\n   })\r\n   .state('turnus', {\r\n     url: \"/turnus\",\r\n     templateUrl: \"views/turnus.html\",\r\n     controller: \"mainCtrl\"\r\n   })\r\n   .state('workers', {\r\n     url: \"/workers\",\r\n     templateUrl: \"views/workers.html\",\r\n     controller: \"mainCtrl\"\r\n   })\r\n});\r\n\n(function(window, angular, undefined) {'use strict';\n\nvar urlBase = \"/api\";\nvar authHeader = 'authorization';\n\nfunction getHost(url) {\n  var m = url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);\n  return m ? m[1] : null;\n}\n\nvar urlBaseHost = getHost(urlBase) || location.host;\n\n/**\n * @ngdoc overview\n * @name lbServices\n * @module\n * @description\n *\n * The `lbServices` module provides services for interacting with\n * the models exposed by the LoopBack server via the REST API.\n *\n */\nvar module = angular.module(\"lbServices\", ['ngResource']);\n\n/**\n * @ngdoc object\n * @name lbServices.User\n * @header lbServices.User\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `User` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\nmodule.factory(\n  \"User\",\n  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {\n    var R = Resource(\n      urlBase + \"/Users/:id\",\n      { 'id': '@id' },\n      {\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__findById__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find a related item by id for accessTokens.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `fk` – `{*}` - Foreign key for accessTokens\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__findById__accessTokens\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Users/:id/accessTokens/:fk\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__destroyById__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a related item by id for accessTokens.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `fk` – `{*}` - Foreign key for accessTokens\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"prototype$__destroyById__accessTokens\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Users/:id/accessTokens/:fk\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__updateById__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update a related item by id for accessTokens.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `fk` – `{*}` - Foreign key for accessTokens\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__updateById__accessTokens\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Users/:id/accessTokens/:fk\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__get__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Queries accessTokens of User.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `filter` – `{object=}` - \n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__get__accessTokens\": {\n          isArray: true,\n          url: urlBase + \"/Users/:id/accessTokens\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__create__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Creates a new instance in accessTokens of this model.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__create__accessTokens\": {\n          url: urlBase + \"/Users/:id/accessTokens\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__delete__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Deletes all accessTokens of this model.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"prototype$__delete__accessTokens\": {\n          url: urlBase + \"/Users/:id/accessTokens\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__count__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Counts accessTokens of User.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"prototype$__count__accessTokens\": {\n          url: urlBase + \"/Users/:id/accessTokens/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#create\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"create\": {\n          url: urlBase + \"/Users\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#createMany\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"createMany\": {\n          isArray: true,\n          url: urlBase + \"/Users\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#upsert\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"upsert\": {\n          url: urlBase + \"/Users\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#exists\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Check whether a model instance exists in the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `exists` – `{boolean=}` - \n         */\n        \"exists\": {\n          url: urlBase + \"/Users/:id/exists\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#findById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         *  - `filter` – `{object=}` - Filter defining fields and include\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"findById\": {\n          url: urlBase + \"/Users/:id\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#find\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find all instances of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"find\": {\n          isArray: true,\n          url: urlBase + \"/Users\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#findOne\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find first instance of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"findOne\": {\n          url: urlBase + \"/Users/findOne\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#updateAll\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        \"updateAll\": {\n          url: urlBase + \"/Users/update\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#deleteById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"deleteById\": {\n          url: urlBase + \"/Users/:id\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#count\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Count instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"count\": {\n          url: urlBase + \"/Users/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$updateAttributes\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update attributes for a model instance and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$updateAttributes\": {\n          url: urlBase + \"/Users/:id\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#createChangeStream\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Create a change stream.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `options` – `{object=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `changes` – `{ReadableStream=}` - \n         */\n        \"createChangeStream\": {\n          url: urlBase + \"/Users/change-stream\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#login\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Login a user with username/email and password.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.\n         *   Default value: `user`.\n         *\n         *  - `rememberMe` - `boolean` - Whether the authentication credentials\n         *     should be remembered in localStorage across app/browser restarts.\n         *     Default: `true`.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The response body contains properties of the AccessToken created on login.\n         * Depending on the value of `include` parameter, the body may contain additional properties:\n         * \n         *   - `user` - `{User}` - Data of the currently logged in user. (`include=user`)\n         * \n         *\n         */\n        \"login\": {\n          params: {\n            include: \"user\"\n          },\n          interceptor: {\n            response: function(response) {\n              var accessToken = response.data;\n              LoopBackAuth.setUser(accessToken.id, accessToken.userId, accessToken.user);\n              LoopBackAuth.rememberMe = response.config.params.rememberMe !== false;\n              LoopBackAuth.save();\n              return response.resource;\n            }\n          },\n          url: urlBase + \"/Users/login\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#logout\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Logout a user with access token.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"logout\": {\n          interceptor: {\n            response: function(response) {\n              LoopBackAuth.clearUser();\n              LoopBackAuth.clearStorage();\n              return response.resource;\n            }\n          },\n          url: urlBase + \"/Users/logout\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#confirm\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Confirm a user registration with email verification token.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `uid` – `{string}` - \n         *\n         *  - `token` – `{string}` - \n         *\n         *  - `redirect` – `{string=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"confirm\": {\n          url: urlBase + \"/Users/confirm\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#resetPassword\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Reset password for a user with email.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"resetPassword\": {\n          url: urlBase + \"/Users/reset\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#getCurrent\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Get data of the currently logged user. Fail with HTTP result 401\n         * when there is no user logged in.\n         *\n         * @param {function(Object,Object)=} successCb\n         *    Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *    `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         */\n        \"getCurrent\": {\n           url: urlBase + \"/Users\" + \"/:id\",\n           method: \"GET\",\n           params: {\n             id: function() {\n              var id = LoopBackAuth.currentUserId;\n              if (id == null) id = '__anonymous__';\n              return id;\n            },\n          },\n          interceptor: {\n            response: function(response) {\n              LoopBackAuth.currentUserData = response.data;\n              return response.resource;\n            }\n          },\n          __isGetCurrentUser__ : true\n        }\n      }\n    );\n\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#updateOrCreate\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        R[\"updateOrCreate\"] = R[\"upsert\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#update\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        R[\"update\"] = R[\"updateAll\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#destroyById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#removeById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#getCachedCurrent\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Get data of the currently logged user that was returned by the last\n         * call to {@link lbServices.User#login} or\n         * {@link lbServices.User#getCurrent}. Return null when there\n         * is no user logged in or the data of the current user were not fetched\n         * yet.\n         *\n         * @returns {Object} A User instance.\n         */\n        R.getCachedCurrent = function() {\n          var data = LoopBackAuth.currentUserData;\n          return data ? new R(data) : null;\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#isAuthenticated\n         * @methodOf lbServices.User\n         *\n         * @returns {boolean} True if the current user is authenticated (logged in).\n         */\n        R.isAuthenticated = function() {\n          return this.getCurrentId() != null;\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#getCurrentId\n         * @methodOf lbServices.User\n         *\n         * @returns {Object} Id of the currently logged-in user or null.\n         */\n        R.getCurrentId = function() {\n          return LoopBackAuth.currentUserId;\n        };\n\n    /**\n    * @ngdoc property\n    * @name lbServices.User#modelName\n    * @propertyOf lbServices.User\n    * @description\n    * The name of the model represented by this $resource,\n    * i.e. `User`.\n    */\n    R.modelName = \"User\";\n\n\n    return R;\n  }]);\n\n/**\n * @ngdoc object\n * @name lbServices.Person\n * @header lbServices.Person\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `Person` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\nmodule.factory(\n  \"Person\",\n  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {\n    var R = Resource(\n      urlBase + \"/people/:id\",\n      { 'id': '@id' },\n      {\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#create\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"create\": {\n          url: urlBase + \"/people\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#createMany\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"createMany\": {\n          isArray: true,\n          url: urlBase + \"/people\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#upsert\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"upsert\": {\n          url: urlBase + \"/people\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#exists\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Check whether a model instance exists in the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `exists` – `{boolean=}` - \n         */\n        \"exists\": {\n          url: urlBase + \"/people/:id/exists\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#findById\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Find a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         *  - `filter` – `{object=}` - Filter defining fields and include\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"findById\": {\n          url: urlBase + \"/people/:id\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#find\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Find all instances of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"find\": {\n          isArray: true,\n          url: urlBase + \"/people\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#findOne\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Find first instance of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"findOne\": {\n          url: urlBase + \"/people/findOne\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#updateAll\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        \"updateAll\": {\n          url: urlBase + \"/people/update\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#deleteById\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"deleteById\": {\n          url: urlBase + \"/people/:id\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#count\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Count instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"count\": {\n          url: urlBase + \"/people/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#prototype$updateAttributes\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Update attributes for a model instance and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"prototype$updateAttributes\": {\n          url: urlBase + \"/people/:id\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#createChangeStream\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Create a change stream.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `options` – `{object=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `changes` – `{ReadableStream=}` - \n         */\n        \"createChangeStream\": {\n          url: urlBase + \"/people/change-stream\",\n          method: \"POST\"\n        },\n      }\n    );\n\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#updateOrCreate\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        R[\"updateOrCreate\"] = R[\"upsert\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#update\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        R[\"update\"] = R[\"updateAll\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#destroyById\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#removeById\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n\n    /**\n    * @ngdoc property\n    * @name lbServices.Person#modelName\n    * @propertyOf lbServices.Person\n    * @description\n    * The name of the model represented by this $resource,\n    * i.e. `Person`.\n    */\n    R.modelName = \"Person\";\n\n\n    return R;\n  }]);\n\n/**\n * @ngdoc object\n * @name lbServices.Member\n * @header lbServices.Member\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `Member` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\nmodule.factory(\n  \"Member\",\n  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {\n    var R = Resource(\n      urlBase + \"/Members/:id\",\n      { 'id': '@id' },\n      {\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#create\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"create\": {\n          url: urlBase + \"/Members\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#createMany\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"createMany\": {\n          isArray: true,\n          url: urlBase + \"/Members\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#upsert\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"upsert\": {\n          url: urlBase + \"/Members\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#exists\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Check whether a model instance exists in the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `exists` – `{boolean=}` - \n         */\n        \"exists\": {\n          url: urlBase + \"/Members/:id/exists\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#findById\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Find a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         *  - `filter` – `{object=}` - Filter defining fields and include\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"findById\": {\n          url: urlBase + \"/Members/:id\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#find\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Find all instances of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"find\": {\n          isArray: true,\n          url: urlBase + \"/Members\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#findOne\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Find first instance of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"findOne\": {\n          url: urlBase + \"/Members/findOne\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#updateAll\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        \"updateAll\": {\n          url: urlBase + \"/Members/update\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#deleteById\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"deleteById\": {\n          url: urlBase + \"/Members/:id\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#count\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Count instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"count\": {\n          url: urlBase + \"/Members/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#prototype$updateAttributes\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Update attributes for a model instance and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"prototype$updateAttributes\": {\n          url: urlBase + \"/Members/:id\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#createChangeStream\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Create a change stream.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `options` – `{object=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `changes` – `{ReadableStream=}` - \n         */\n        \"createChangeStream\": {\n          url: urlBase + \"/Members/change-stream\",\n          method: \"POST\"\n        },\n      }\n    );\n\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#updateOrCreate\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        R[\"updateOrCreate\"] = R[\"upsert\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#update\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        R[\"update\"] = R[\"updateAll\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#destroyById\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#removeById\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n\n    /**\n    * @ngdoc property\n    * @name lbServices.Member#modelName\n    * @propertyOf lbServices.Member\n    * @description\n    * The name of the model represented by this $resource,\n    * i.e. `Member`.\n    */\n    R.modelName = \"Member\";\n\n\n    return R;\n  }]);\n\n\nmodule\n  .factory('LoopBackAuth', function() {\n    var props = ['accessTokenId', 'currentUserId', 'rememberMe'];\n    var propsPrefix = '$LoopBack$';\n\n    function LoopBackAuth() {\n      var self = this;\n      props.forEach(function(name) {\n        self[name] = load(name);\n      });\n      this.currentUserData = null;\n    }\n\n    LoopBackAuth.prototype.save = function() {\n      var self = this;\n      var storage = this.rememberMe ? localStorage : sessionStorage;\n      props.forEach(function(name) {\n        save(storage, name, self[name]);\n      });\n    };\n\n    LoopBackAuth.prototype.setUser = function(accessTokenId, userId, userData) {\n      this.accessTokenId = accessTokenId;\n      this.currentUserId = userId;\n      this.currentUserData = userData;\n    }\n\n    LoopBackAuth.prototype.clearUser = function() {\n      this.accessTokenId = null;\n      this.currentUserId = null;\n      this.currentUserData = null;\n    }\n\n    LoopBackAuth.prototype.clearStorage = function() {\n      props.forEach(function(name) {\n        save(sessionStorage, name, null);\n        save(localStorage, name, null);\n      });\n    };\n\n    return new LoopBackAuth();\n\n    // Note: LocalStorage converts the value to string\n    // We are using empty string as a marker for null/undefined values.\n    function save(storage, name, value) {\n      var key = propsPrefix + name;\n      if (value == null) value = '';\n      storage[key] = value;\n    }\n\n    function load(name) {\n      var key = propsPrefix + name;\n      return localStorage[key] || sessionStorage[key] || null;\n    }\n  })\n  .config(['$httpProvider', function($httpProvider) {\n    $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');\n  }])\n  .factory('LoopBackAuthRequestInterceptor', [ '$q', 'LoopBackAuth',\n    function($q, LoopBackAuth) {\n      return {\n        'request': function(config) {\n\n          // filter out external requests\n          var host = getHost(config.url);\n          if (host && host !== urlBaseHost) {\n            return config;\n          }\n\n          if (LoopBackAuth.accessTokenId) {\n            config.headers[authHeader] = LoopBackAuth.accessTokenId;\n          } else if (config.__isGetCurrentUser__) {\n            // Return a stub 401 error for User.getCurrent() when\n            // there is no user logged in\n            var res = {\n              body: { error: { status: 401 } },\n              status: 401,\n              config: config,\n              headers: function() { return undefined; }\n            };\n            return $q.reject(res);\n          }\n          return config || $q.when(config);\n        }\n      }\n    }])\n\n  /**\n   * @ngdoc object\n   * @name lbServices.LoopBackResourceProvider\n   * @header lbServices.LoopBackResourceProvider\n   * @description\n   * Use `LoopBackResourceProvider` to change the global configuration\n   * settings used by all models. Note that the provider is available\n   * to Configuration Blocks only, see\n   * {@link https://docs.angularjs.org/guide/module#module-loading-dependencies Module Loading & Dependencies}\n   * for more details.\n   *\n   * ## Example\n   *\n   * ```js\n   * angular.module('app')\n   *  .config(function(LoopBackResourceProvider) {\n   *     LoopBackResourceProvider.setAuthHeader('X-Access-Token');\n   *  });\n   * ```\n   */\n  .provider('LoopBackResource', function LoopBackResourceProvider() {\n    /**\n     * @ngdoc method\n     * @name lbServices.LoopBackResourceProvider#setAuthHeader\n     * @methodOf lbServices.LoopBackResourceProvider\n     * @param {string} header The header name to use, e.g. `X-Access-Token`\n     * @description\n     * Configure the REST transport to use a different header for sending\n     * the authentication token. It is sent in the `Authorization` header\n     * by default.\n     */\n    this.setAuthHeader = function(header) {\n      authHeader = header;\n    };\n\n    /**\n     * @ngdoc method\n     * @name lbServices.LoopBackResourceProvider#setUrlBase\n     * @methodOf lbServices.LoopBackResourceProvider\n     * @param {string} url The URL to use, e.g. `/api` or `//example.com/api`.\n     * @description\n     * Change the URL of the REST API server. By default, the URL provided\n     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.\n     */\n    this.setUrlBase = function(url) {\n      urlBase = url;\n      urlBaseHost = getHost(urlBase) || location.host;\n    };\n\n    /**\n     * @ngdoc method\n     * @name lbServices.LoopBackResourceProvider#getUrlBase\n     * @methodOf lbServices.LoopBackResourceProvider\n     * @description\n     * Get the URL of the REST API server. The URL provided\n     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.\n     */\n    this.getUrlBase = function() {\n      return urlBase;\n    };\n\n    this.$get = ['$resource', function($resource) {\n      return function(url, params, actions) {\n        var resource = $resource(url, params, actions);\n\n        // Angular always calls POST on $save()\n        // This hack is based on\n        // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/\n        resource.prototype.$save = function(success, error) {\n          // Fortunately, LoopBack provides a convenient `upsert` method\n          // that exactly fits our needs.\n          var result = resource.upsert.call(this, {}, this, success, error);\n          return result.$promise || result;\n        };\n        return resource;\n      };\n    }];\n  });\n\n})(window, window.angular);\n\n//# sourceMappingURL=app.concat.js.map\n\nvar turnusApp = angular\n.module('turnusApp', ['ui.router', 'ngResource', 'lbServices'])\n.config(function(LoopBackResourceProvider) {\n    LoopBackResourceProvider.setUrlBase('https://turnus-server.herokuapp.com/api')\n  });\n\nvar turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")});angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member);$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular);var turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")});angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member);$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular);var turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")}),turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")});angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member),$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData;\n},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular);var turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")});angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member),$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular),angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member);$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular);\n'use strict';\r\n\r\nangular.module('turnusApp')\r\n  .controller('mainCtrl', function($scope, Member) {\r\n    function getMembers() {\r\n      $scope.members = Member.find();\r\n    }\r\n\r\n    //Reset data\r\n    $scope.reset = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        $scope.members[i].available1 = true;\r\n        $scope.members[i].available2 = true;\r\n        $scope.members[i].available3 = true;\r\n        $scope.members[i].available4 = true;\r\n        $scope.members[i].available5 = true;\r\n        $scope.members[i].chosen1 = false;\r\n        $scope.members[i].chosen2 = false;\r\n        $scope.members[i].chosen3 = false;\r\n        $scope.members[i].chosen4 = false;\r\n        $scope.members[i].chosen5 = false;\r\n        $scope.members[i].$save();\r\n        console.log('Reset')\r\n      }\r\n    }\r\n\r\n    //Select all available for event\r\n    $scope.selectAll1 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].available1 == true) {\r\n          $scope.members[i].chosen1 = true;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.unselectAll1 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].chosen1 == true) {\r\n          $scope.members[i].chosen1 = false;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.selectAll2 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].available2 == true) {\r\n          $scope.members[i].chosen2 = true;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.unselectAll2 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].chosen2 == true) {\r\n          $scope.members[i].chosen2 = false;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.selectAll3 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].available3 == true) {\r\n          $scope.members[i].chosen3 = true;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.unselectAll3 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].chosen3 == true) {\r\n          $scope.members[i].chosen3 = false;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.selectAll4 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].available4 == true) {\r\n          $scope.members[i].chosen4 = true;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.unselectAll4 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].chosen4 == true) {\r\n          $scope.members[i].chosen4 = false;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.selectAll5 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].available5 == true) {\r\n          $scope.members[i].chosen5 = true;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.unselectAll5 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].chosen5 == true) {\r\n          $scope.members[i].chosen5 = false;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    //Select not available\r\n    $scope.available1 = function available() {\r\n      this.member.available1 = !this.member.available1;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.available2 = function available() {\r\n      this.member.available2 = !this.member.available2;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.available3 = function available() {\r\n      this.member.available3 = !this.member.available3;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.available4 = function available() {\r\n      this.member.available4 = !this.member.available4;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.available5 = function available() {\r\n      this.member.available5 = !this.member.available5;\r\n      this.member.$save();\r\n    }\r\n\r\n    //Select people for event\r\n\r\n    $scope.chosen1 = function available() {\r\n      this.member.chosen1 = !this.member.chosen1;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.chosen2 = function available() {\r\n      this.member.chosen2 = !this.member.chosen2;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.chosen3 = function available() {\r\n      this.member.chosen3 = !this.member.chosen3;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.chosen4 = function available() {\r\n      this.member.chosen4 = !this.member.chosen4;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.chosen5 = function available() {\r\n      this.member.chosen5 = !this.member.chosen5;\r\n      this.member.$save();\r\n    }\r\n\r\n    //Clears the input fields on workers\r\n    function clearInput() {\r\n      $scope.member = {\r\n        firstname: '',\r\n        lastname: '',\r\n        position: ''\r\n      };\r\n    }\r\n\r\n\r\n    $scope.addMember = function addMember() {\r\n      var member = Member.create($scope.member);\r\n      $scope.members.push(Member)\r\n      getMembers();\r\n      clearInput();\r\n    }\r\n\r\n    $scope.removeMember = function removeMember() {\r\n      Member.deleteById({\r\n          id: this.member.id\r\n        })\r\n        .$promise\r\n        .then(function() {\r\n          getMembers();\r\n        });\r\n    }\r\n\r\n    //TODO updateMember\r\n    getMembers();\r\n\r\n  });\r\n\nturnusApp.config(function ($stateProvider, $urlRouterProvider) {\r\n\r\n  // For any unmatched url, redirect to /home\r\n $urlRouterProvider.otherwise(\"/home\");\r\n\r\n $stateProvider\r\n   .state('home', {\r\n     url: \"/home\",\r\n     templateUrl: \"views/home.html\",\r\n     controller: \"mainCtrl\"\r\n   })\r\n   .state('turnus', {\r\n     url: \"/turnus\",\r\n     templateUrl: \"views/turnus.html\",\r\n     controller: \"mainCtrl\"\r\n   })\r\n   .state('workers', {\r\n     url: \"/workers\",\r\n     templateUrl: \"views/workers.html\",\r\n     controller: \"mainCtrl\"\r\n   })\r\n});\r\n\n(function(window, angular, undefined) {'use strict';\n\nvar urlBase = \"/api\";\nvar authHeader = 'authorization';\n\nfunction getHost(url) {\n  var m = url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);\n  return m ? m[1] : null;\n}\n\nvar urlBaseHost = getHost(urlBase) || location.host;\n\n/**\n * @ngdoc overview\n * @name lbServices\n * @module\n * @description\n *\n * The `lbServices` module provides services for interacting with\n * the models exposed by the LoopBack server via the REST API.\n *\n */\nvar module = angular.module(\"lbServices\", ['ngResource']);\n\n/**\n * @ngdoc object\n * @name lbServices.User\n * @header lbServices.User\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `User` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\nmodule.factory(\n  \"User\",\n  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {\n    var R = Resource(\n      urlBase + \"/Users/:id\",\n      { 'id': '@id' },\n      {\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__findById__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find a related item by id for accessTokens.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `fk` – `{*}` - Foreign key for accessTokens\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__findById__accessTokens\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Users/:id/accessTokens/:fk\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__destroyById__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a related item by id for accessTokens.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `fk` – `{*}` - Foreign key for accessTokens\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"prototype$__destroyById__accessTokens\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Users/:id/accessTokens/:fk\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__updateById__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update a related item by id for accessTokens.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `fk` – `{*}` - Foreign key for accessTokens\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__updateById__accessTokens\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Users/:id/accessTokens/:fk\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__get__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Queries accessTokens of User.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `filter` – `{object=}` - \n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__get__accessTokens\": {\n          isArray: true,\n          url: urlBase + \"/Users/:id/accessTokens\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__create__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Creates a new instance in accessTokens of this model.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__create__accessTokens\": {\n          url: urlBase + \"/Users/:id/accessTokens\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__delete__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Deletes all accessTokens of this model.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"prototype$__delete__accessTokens\": {\n          url: urlBase + \"/Users/:id/accessTokens\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__count__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Counts accessTokens of User.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"prototype$__count__accessTokens\": {\n          url: urlBase + \"/Users/:id/accessTokens/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#create\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"create\": {\n          url: urlBase + \"/Users\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#createMany\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"createMany\": {\n          isArray: true,\n          url: urlBase + \"/Users\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#upsert\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"upsert\": {\n          url: urlBase + \"/Users\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#exists\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Check whether a model instance exists in the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `exists` – `{boolean=}` - \n         */\n        \"exists\": {\n          url: urlBase + \"/Users/:id/exists\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#findById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         *  - `filter` – `{object=}` - Filter defining fields and include\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"findById\": {\n          url: urlBase + \"/Users/:id\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#find\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find all instances of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"find\": {\n          isArray: true,\n          url: urlBase + \"/Users\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#findOne\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find first instance of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"findOne\": {\n          url: urlBase + \"/Users/findOne\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#updateAll\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        \"updateAll\": {\n          url: urlBase + \"/Users/update\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#deleteById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"deleteById\": {\n          url: urlBase + \"/Users/:id\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#count\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Count instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"count\": {\n          url: urlBase + \"/Users/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$updateAttributes\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update attributes for a model instance and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$updateAttributes\": {\n          url: urlBase + \"/Users/:id\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#createChangeStream\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Create a change stream.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `options` – `{object=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `changes` – `{ReadableStream=}` - \n         */\n        \"createChangeStream\": {\n          url: urlBase + \"/Users/change-stream\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#login\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Login a user with username/email and password.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.\n         *   Default value: `user`.\n         *\n         *  - `rememberMe` - `boolean` - Whether the authentication credentials\n         *     should be remembered in localStorage across app/browser restarts.\n         *     Default: `true`.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The response body contains properties of the AccessToken created on login.\n         * Depending on the value of `include` parameter, the body may contain additional properties:\n         * \n         *   - `user` - `{User}` - Data of the currently logged in user. (`include=user`)\n         * \n         *\n         */\n        \"login\": {\n          params: {\n            include: \"user\"\n          },\n          interceptor: {\n            response: function(response) {\n              var accessToken = response.data;\n              LoopBackAuth.setUser(accessToken.id, accessToken.userId, accessToken.user);\n              LoopBackAuth.rememberMe = response.config.params.rememberMe !== false;\n              LoopBackAuth.save();\n              return response.resource;\n            }\n          },\n          url: urlBase + \"/Users/login\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#logout\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Logout a user with access token.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"logout\": {\n          interceptor: {\n            response: function(response) {\n              LoopBackAuth.clearUser();\n              LoopBackAuth.clearStorage();\n              return response.resource;\n            }\n          },\n          url: urlBase + \"/Users/logout\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#confirm\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Confirm a user registration with email verification token.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `uid` – `{string}` - \n         *\n         *  - `token` – `{string}` - \n         *\n         *  - `redirect` – `{string=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"confirm\": {\n          url: urlBase + \"/Users/confirm\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#resetPassword\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Reset password for a user with email.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"resetPassword\": {\n          url: urlBase + \"/Users/reset\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#getCurrent\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Get data of the currently logged user. Fail with HTTP result 401\n         * when there is no user logged in.\n         *\n         * @param {function(Object,Object)=} successCb\n         *    Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *    `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         */\n        \"getCurrent\": {\n           url: urlBase + \"/Users\" + \"/:id\",\n           method: \"GET\",\n           params: {\n             id: function() {\n              var id = LoopBackAuth.currentUserId;\n              if (id == null) id = '__anonymous__';\n              return id;\n            },\n          },\n          interceptor: {\n            response: function(response) {\n              LoopBackAuth.currentUserData = response.data;\n              return response.resource;\n            }\n          },\n          __isGetCurrentUser__ : true\n        }\n      }\n    );\n\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#updateOrCreate\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        R[\"updateOrCreate\"] = R[\"upsert\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#update\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        R[\"update\"] = R[\"updateAll\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#destroyById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#removeById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#getCachedCurrent\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Get data of the currently logged user that was returned by the last\n         * call to {@link lbServices.User#login} or\n         * {@link lbServices.User#getCurrent}. Return null when there\n         * is no user logged in or the data of the current user were not fetched\n         * yet.\n         *\n         * @returns {Object} A User instance.\n         */\n        R.getCachedCurrent = function() {\n          var data = LoopBackAuth.currentUserData;\n          return data ? new R(data) : null;\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#isAuthenticated\n         * @methodOf lbServices.User\n         *\n         * @returns {boolean} True if the current user is authenticated (logged in).\n         */\n        R.isAuthenticated = function() {\n          return this.getCurrentId() != null;\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#getCurrentId\n         * @methodOf lbServices.User\n         *\n         * @returns {Object} Id of the currently logged-in user or null.\n         */\n        R.getCurrentId = function() {\n          return LoopBackAuth.currentUserId;\n        };\n\n    /**\n    * @ngdoc property\n    * @name lbServices.User#modelName\n    * @propertyOf lbServices.User\n    * @description\n    * The name of the model represented by this $resource,\n    * i.e. `User`.\n    */\n    R.modelName = \"User\";\n\n\n    return R;\n  }]);\n\n/**\n * @ngdoc object\n * @name lbServices.Person\n * @header lbServices.Person\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `Person` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\nmodule.factory(\n  \"Person\",\n  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {\n    var R = Resource(\n      urlBase + \"/people/:id\",\n      { 'id': '@id' },\n      {\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#create\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"create\": {\n          url: urlBase + \"/people\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#createMany\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"createMany\": {\n          isArray: true,\n          url: urlBase + \"/people\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#upsert\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"upsert\": {\n          url: urlBase + \"/people\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#exists\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Check whether a model instance exists in the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `exists` – `{boolean=}` - \n         */\n        \"exists\": {\n          url: urlBase + \"/people/:id/exists\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#findById\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Find a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         *  - `filter` – `{object=}` - Filter defining fields and include\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"findById\": {\n          url: urlBase + \"/people/:id\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#find\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Find all instances of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"find\": {\n          isArray: true,\n          url: urlBase + \"/people\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#findOne\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Find first instance of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"findOne\": {\n          url: urlBase + \"/people/findOne\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#updateAll\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        \"updateAll\": {\n          url: urlBase + \"/people/update\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#deleteById\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"deleteById\": {\n          url: urlBase + \"/people/:id\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#count\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Count instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"count\": {\n          url: urlBase + \"/people/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#prototype$updateAttributes\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Update attributes for a model instance and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"prototype$updateAttributes\": {\n          url: urlBase + \"/people/:id\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#createChangeStream\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Create a change stream.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `options` – `{object=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `changes` – `{ReadableStream=}` - \n         */\n        \"createChangeStream\": {\n          url: urlBase + \"/people/change-stream\",\n          method: \"POST\"\n        },\n      }\n    );\n\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#updateOrCreate\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        R[\"updateOrCreate\"] = R[\"upsert\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#update\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        R[\"update\"] = R[\"updateAll\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#destroyById\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#removeById\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n\n    /**\n    * @ngdoc property\n    * @name lbServices.Person#modelName\n    * @propertyOf lbServices.Person\n    * @description\n    * The name of the model represented by this $resource,\n    * i.e. `Person`.\n    */\n    R.modelName = \"Person\";\n\n\n    return R;\n  }]);\n\n/**\n * @ngdoc object\n * @name lbServices.Member\n * @header lbServices.Member\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `Member` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\nmodule.factory(\n  \"Member\",\n  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {\n    var R = Resource(\n      urlBase + \"/Members/:id\",\n      { 'id': '@id' },\n      {\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#create\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"create\": {\n          url: urlBase + \"/Members\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#createMany\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"createMany\": {\n          isArray: true,\n          url: urlBase + \"/Members\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#upsert\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"upsert\": {\n          url: urlBase + \"/Members\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#exists\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Check whether a model instance exists in the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `exists` – `{boolean=}` - \n         */\n        \"exists\": {\n          url: urlBase + \"/Members/:id/exists\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#findById\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Find a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         *  - `filter` – `{object=}` - Filter defining fields and include\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"findById\": {\n          url: urlBase + \"/Members/:id\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#find\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Find all instances of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"find\": {\n          isArray: true,\n          url: urlBase + \"/Members\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#findOne\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Find first instance of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"findOne\": {\n          url: urlBase + \"/Members/findOne\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#updateAll\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        \"updateAll\": {\n          url: urlBase + \"/Members/update\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#deleteById\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"deleteById\": {\n          url: urlBase + \"/Members/:id\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#count\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Count instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"count\": {\n          url: urlBase + \"/Members/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#prototype$updateAttributes\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Update attributes for a model instance and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"prototype$updateAttributes\": {\n          url: urlBase + \"/Members/:id\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#createChangeStream\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Create a change stream.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `options` – `{object=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `changes` – `{ReadableStream=}` - \n         */\n        \"createChangeStream\": {\n          url: urlBase + \"/Members/change-stream\",\n          method: \"POST\"\n        },\n      }\n    );\n\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#updateOrCreate\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        R[\"updateOrCreate\"] = R[\"upsert\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#update\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        R[\"update\"] = R[\"updateAll\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#destroyById\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#removeById\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n\n    /**\n    * @ngdoc property\n    * @name lbServices.Member#modelName\n    * @propertyOf lbServices.Member\n    * @description\n    * The name of the model represented by this $resource,\n    * i.e. `Member`.\n    */\n    R.modelName = \"Member\";\n\n\n    return R;\n  }]);\n\n\nmodule\n  .factory('LoopBackAuth', function() {\n    var props = ['accessTokenId', 'currentUserId', 'rememberMe'];\n    var propsPrefix = '$LoopBack$';\n\n    function LoopBackAuth() {\n      var self = this;\n      props.forEach(function(name) {\n        self[name] = load(name);\n      });\n      this.currentUserData = null;\n    }\n\n    LoopBackAuth.prototype.save = function() {\n      var self = this;\n      var storage = this.rememberMe ? localStorage : sessionStorage;\n      props.forEach(function(name) {\n        save(storage, name, self[name]);\n      });\n    };\n\n    LoopBackAuth.prototype.setUser = function(accessTokenId, userId, userData) {\n      this.accessTokenId = accessTokenId;\n      this.currentUserId = userId;\n      this.currentUserData = userData;\n    }\n\n    LoopBackAuth.prototype.clearUser = function() {\n      this.accessTokenId = null;\n      this.currentUserId = null;\n      this.currentUserData = null;\n    }\n\n    LoopBackAuth.prototype.clearStorage = function() {\n      props.forEach(function(name) {\n        save(sessionStorage, name, null);\n        save(localStorage, name, null);\n      });\n    };\n\n    return new LoopBackAuth();\n\n    // Note: LocalStorage converts the value to string\n    // We are using empty string as a marker for null/undefined values.\n    function save(storage, name, value) {\n      var key = propsPrefix + name;\n      if (value == null) value = '';\n      storage[key] = value;\n    }\n\n    function load(name) {\n      var key = propsPrefix + name;\n      return localStorage[key] || sessionStorage[key] || null;\n    }\n  })\n  .config(['$httpProvider', function($httpProvider) {\n    $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');\n  }])\n  .factory('LoopBackAuthRequestInterceptor', [ '$q', 'LoopBackAuth',\n    function($q, LoopBackAuth) {\n      return {\n        'request': function(config) {\n\n          // filter out external requests\n          var host = getHost(config.url);\n          if (host && host !== urlBaseHost) {\n            return config;\n          }\n\n          if (LoopBackAuth.accessTokenId) {\n            config.headers[authHeader] = LoopBackAuth.accessTokenId;\n          } else if (config.__isGetCurrentUser__) {\n            // Return a stub 401 error for User.getCurrent() when\n            // there is no user logged in\n            var res = {\n              body: { error: { status: 401 } },\n              status: 401,\n              config: config,\n              headers: function() { return undefined; }\n            };\n            return $q.reject(res);\n          }\n          return config || $q.when(config);\n        }\n      }\n    }])\n\n  /**\n   * @ngdoc object\n   * @name lbServices.LoopBackResourceProvider\n   * @header lbServices.LoopBackResourceProvider\n   * @description\n   * Use `LoopBackResourceProvider` to change the global configuration\n   * settings used by all models. Note that the provider is available\n   * to Configuration Blocks only, see\n   * {@link https://docs.angularjs.org/guide/module#module-loading-dependencies Module Loading & Dependencies}\n   * for more details.\n   *\n   * ## Example\n   *\n   * ```js\n   * angular.module('app')\n   *  .config(function(LoopBackResourceProvider) {\n   *     LoopBackResourceProvider.setAuthHeader('X-Access-Token');\n   *  });\n   * ```\n   */\n  .provider('LoopBackResource', function LoopBackResourceProvider() {\n    /**\n     * @ngdoc method\n     * @name lbServices.LoopBackResourceProvider#setAuthHeader\n     * @methodOf lbServices.LoopBackResourceProvider\n     * @param {string} header The header name to use, e.g. `X-Access-Token`\n     * @description\n     * Configure the REST transport to use a different header for sending\n     * the authentication token. It is sent in the `Authorization` header\n     * by default.\n     */\n    this.setAuthHeader = function(header) {\n      authHeader = header;\n    };\n\n    /**\n     * @ngdoc method\n     * @name lbServices.LoopBackResourceProvider#setUrlBase\n     * @methodOf lbServices.LoopBackResourceProvider\n     * @param {string} url The URL to use, e.g. `/api` or `//example.com/api`.\n     * @description\n     * Change the URL of the REST API server. By default, the URL provided\n     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.\n     */\n    this.setUrlBase = function(url) {\n      urlBase = url;\n      urlBaseHost = getHost(urlBase) || location.host;\n    };\n\n    /**\n     * @ngdoc method\n     * @name lbServices.LoopBackResourceProvider#getUrlBase\n     * @methodOf lbServices.LoopBackResourceProvider\n     * @description\n     * Get the URL of the REST API server. The URL provided\n     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.\n     */\n    this.getUrlBase = function() {\n      return urlBase;\n    };\n\n    this.$get = ['$resource', function($resource) {\n      return function(url, params, actions) {\n        var resource = $resource(url, params, actions);\n\n        // Angular always calls POST on $save()\n        // This hack is based on\n        // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/\n        resource.prototype.$save = function(success, error) {\n          // Fortunately, LoopBack provides a convenient `upsert` method\n          // that exactly fits our needs.\n          var result = resource.upsert.call(this, {}, this, success, error);\n          return result.$promise || result;\n        };\n        return resource;\n      };\n    }];\n  });\n\n})(window, window.angular);\n\n//# sourceMappingURL=app.concat.js.map\n\nvar turnusApp = angular\n.module('turnusApp', ['ui.router', 'ngResource', 'lbServices'])\n.config(function(LoopBackResourceProvider) {\n    LoopBackResourceProvider.setUrlBase('https://turnus-server.herokuapp.com/api')\n  });\n\nvar turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")});angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member);$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular);var turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")});angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member);$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular);var turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")}),turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")});angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member),$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData;\n},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular);var turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")});angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member),$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular),angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member);$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular);var turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")}),turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")});angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member),$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{\nurl:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular);var turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")});angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member),$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular);var turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")}),turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")});angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member),$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular);var turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")});angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member),$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){\nvar R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular),angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member),$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular),angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member);$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular);\n'use strict';\r\n\r\nangular.module('turnusApp')\r\n  .controller('mainCtrl', function($scope, Member) {\r\n    function getMembers() {\r\n      $scope.members = Member.find();\r\n    }\r\n\r\n    //Reset data\r\n    $scope.reset = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        $scope.members[i].available1 = true;\r\n        $scope.members[i].available2 = true;\r\n        $scope.members[i].available3 = true;\r\n        $scope.members[i].available4 = true;\r\n        $scope.members[i].available5 = true;\r\n        $scope.members[i].chosen1 = false;\r\n        $scope.members[i].chosen2 = false;\r\n        $scope.members[i].chosen3 = false;\r\n        $scope.members[i].chosen4 = false;\r\n        $scope.members[i].chosen5 = false;\r\n        $scope.members[i].$save();\r\n        console.log('Reset')\r\n      }\r\n    }\r\n\r\n    //Select all available for event\r\n    $scope.selectAll1 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].available1 == true) {\r\n          $scope.members[i].chosen1 = true;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.unselectAll1 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].chosen1 == true) {\r\n          $scope.members[i].chosen1 = false;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.selectAll2 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].available2 == true) {\r\n          $scope.members[i].chosen2 = true;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.unselectAll2 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].chosen2 == true) {\r\n          $scope.members[i].chosen2 = false;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.selectAll3 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].available3 == true) {\r\n          $scope.members[i].chosen3 = true;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.unselectAll3 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].chosen3 == true) {\r\n          $scope.members[i].chosen3 = false;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.selectAll4 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].available4 == true) {\r\n          $scope.members[i].chosen4 = true;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.unselectAll4 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].chosen4 == true) {\r\n          $scope.members[i].chosen4 = false;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.selectAll5 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].available5 == true) {\r\n          $scope.members[i].chosen5 = true;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.unselectAll5 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].chosen5 == true) {\r\n          $scope.members[i].chosen5 = false;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    //Select not available\r\n    $scope.available1 = function available() {\r\n      this.member.available1 = !this.member.available1;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.available2 = function available() {\r\n      this.member.available2 = !this.member.available2;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.available3 = function available() {\r\n      this.member.available3 = !this.member.available3;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.available4 = function available() {\r\n      this.member.available4 = !this.member.available4;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.available5 = function available() {\r\n      this.member.available5 = !this.member.available5;\r\n      this.member.$save();\r\n    }\r\n\r\n    //Select people for event\r\n\r\n    $scope.chosen1 = function available() {\r\n      this.member.chosen1 = !this.member.chosen1;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.chosen2 = function available() {\r\n      this.member.chosen2 = !this.member.chosen2;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.chosen3 = function available() {\r\n      this.member.chosen3 = !this.member.chosen3;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.chosen4 = function available() {\r\n      this.member.chosen4 = !this.member.chosen4;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.chosen5 = function available() {\r\n      this.member.chosen5 = !this.member.chosen5;\r\n      this.member.$save();\r\n    }\r\n\r\n    //Clears the input fields on workers\r\n    function clearInput() {\r\n      $scope.member = {\r\n        firstname: '',\r\n        lastname: '',\r\n        position: ''\r\n      };\r\n    }\r\n\r\n\r\n    $scope.addMember = function addMember() {\r\n      var member = Member.create($scope.member);\r\n      $scope.members.push(Member)\r\n      getMembers();\r\n      clearInput();\r\n    }\r\n\r\n    $scope.removeMember = function removeMember() {\r\n      Member.deleteById({\r\n          id: this.member.id\r\n        })\r\n        .$promise\r\n        .then(function() {\r\n          getMembers();\r\n        });\r\n    }\r\n\r\n    //TODO updateMember\r\n    getMembers();\r\n\r\n  });\r\n\nturnusApp.config(function ($stateProvider, $urlRouterProvider) {\r\n\r\n  // For any unmatched url, redirect to /home\r\n $urlRouterProvider.otherwise(\"/home\");\r\n\r\n $stateProvider\r\n   .state('home', {\r\n     url: \"/home\",\r\n     templateUrl: \"views/home.html\",\r\n     controller: \"mainCtrl\"\r\n   })\r\n   .state('turnus', {\r\n     url: \"/turnus\",\r\n     templateUrl: \"views/turnus.html\",\r\n     controller: \"mainCtrl\"\r\n   })\r\n   .state('workers', {\r\n     url: \"/workers\",\r\n     templateUrl: \"views/workers.html\",\r\n     controller: \"mainCtrl\"\r\n   })\r\n});\r\n\n(function(window, angular, undefined) {'use strict';\n\nvar urlBase = \"/api\";\nvar authHeader = 'authorization';\n\nfunction getHost(url) {\n  var m = url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);\n  return m ? m[1] : null;\n}\n\nvar urlBaseHost = getHost(urlBase) || location.host;\n\n/**\n * @ngdoc overview\n * @name lbServices\n * @module\n * @description\n *\n * The `lbServices` module provides services for interacting with\n * the models exposed by the LoopBack server via the REST API.\n *\n */\nvar module = angular.module(\"lbServices\", ['ngResource']);\n\n/**\n * @ngdoc object\n * @name lbServices.User\n * @header lbServices.User\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `User` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\nmodule.factory(\n  \"User\",\n  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {\n    var R = Resource(\n      urlBase + \"/Users/:id\",\n      { 'id': '@id' },\n      {\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__findById__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find a related item by id for accessTokens.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `fk` – `{*}` - Foreign key for accessTokens\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__findById__accessTokens\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Users/:id/accessTokens/:fk\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__destroyById__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a related item by id for accessTokens.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `fk` – `{*}` - Foreign key for accessTokens\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"prototype$__destroyById__accessTokens\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Users/:id/accessTokens/:fk\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__updateById__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update a related item by id for accessTokens.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `fk` – `{*}` - Foreign key for accessTokens\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__updateById__accessTokens\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Users/:id/accessTokens/:fk\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__get__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Queries accessTokens of User.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `filter` – `{object=}` - \n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__get__accessTokens\": {\n          isArray: true,\n          url: urlBase + \"/Users/:id/accessTokens\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__create__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Creates a new instance in accessTokens of this model.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__create__accessTokens\": {\n          url: urlBase + \"/Users/:id/accessTokens\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__delete__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Deletes all accessTokens of this model.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"prototype$__delete__accessTokens\": {\n          url: urlBase + \"/Users/:id/accessTokens\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__count__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Counts accessTokens of User.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"prototype$__count__accessTokens\": {\n          url: urlBase + \"/Users/:id/accessTokens/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#create\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"create\": {\n          url: urlBase + \"/Users\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#createMany\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"createMany\": {\n          isArray: true,\n          url: urlBase + \"/Users\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#upsert\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"upsert\": {\n          url: urlBase + \"/Users\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#exists\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Check whether a model instance exists in the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `exists` – `{boolean=}` - \n         */\n        \"exists\": {\n          url: urlBase + \"/Users/:id/exists\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#findById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         *  - `filter` – `{object=}` - Filter defining fields and include\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"findById\": {\n          url: urlBase + \"/Users/:id\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#find\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find all instances of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"find\": {\n          isArray: true,\n          url: urlBase + \"/Users\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#findOne\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find first instance of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"findOne\": {\n          url: urlBase + \"/Users/findOne\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#updateAll\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        \"updateAll\": {\n          url: urlBase + \"/Users/update\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#deleteById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"deleteById\": {\n          url: urlBase + \"/Users/:id\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#count\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Count instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"count\": {\n          url: urlBase + \"/Users/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$updateAttributes\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update attributes for a model instance and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$updateAttributes\": {\n          url: urlBase + \"/Users/:id\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#createChangeStream\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Create a change stream.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `options` – `{object=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `changes` – `{ReadableStream=}` - \n         */\n        \"createChangeStream\": {\n          url: urlBase + \"/Users/change-stream\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#login\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Login a user with username/email and password.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.\n         *   Default value: `user`.\n         *\n         *  - `rememberMe` - `boolean` - Whether the authentication credentials\n         *     should be remembered in localStorage across app/browser restarts.\n         *     Default: `true`.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The response body contains properties of the AccessToken created on login.\n         * Depending on the value of `include` parameter, the body may contain additional properties:\n         * \n         *   - `user` - `{User}` - Data of the currently logged in user. (`include=user`)\n         * \n         *\n         */\n        \"login\": {\n          params: {\n            include: \"user\"\n          },\n          interceptor: {\n            response: function(response) {\n              var accessToken = response.data;\n              LoopBackAuth.setUser(accessToken.id, accessToken.userId, accessToken.user);\n              LoopBackAuth.rememberMe = response.config.params.rememberMe !== false;\n              LoopBackAuth.save();\n              return response.resource;\n            }\n          },\n          url: urlBase + \"/Users/login\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#logout\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Logout a user with access token.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"logout\": {\n          interceptor: {\n            response: function(response) {\n              LoopBackAuth.clearUser();\n              LoopBackAuth.clearStorage();\n              return response.resource;\n            }\n          },\n          url: urlBase + \"/Users/logout\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#confirm\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Confirm a user registration with email verification token.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `uid` – `{string}` - \n         *\n         *  - `token` – `{string}` - \n         *\n         *  - `redirect` – `{string=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"confirm\": {\n          url: urlBase + \"/Users/confirm\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#resetPassword\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Reset password for a user with email.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"resetPassword\": {\n          url: urlBase + \"/Users/reset\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#getCurrent\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Get data of the currently logged user. Fail with HTTP result 401\n         * when there is no user logged in.\n         *\n         * @param {function(Object,Object)=} successCb\n         *    Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *    `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         */\n        \"getCurrent\": {\n           url: urlBase + \"/Users\" + \"/:id\",\n           method: \"GET\",\n           params: {\n             id: function() {\n              var id = LoopBackAuth.currentUserId;\n              if (id == null) id = '__anonymous__';\n              return id;\n            },\n          },\n          interceptor: {\n            response: function(response) {\n              LoopBackAuth.currentUserData = response.data;\n              return response.resource;\n            }\n          },\n          __isGetCurrentUser__ : true\n        }\n      }\n    );\n\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#updateOrCreate\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        R[\"updateOrCreate\"] = R[\"upsert\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#update\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        R[\"update\"] = R[\"updateAll\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#destroyById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#removeById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#getCachedCurrent\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Get data of the currently logged user that was returned by the last\n         * call to {@link lbServices.User#login} or\n         * {@link lbServices.User#getCurrent}. Return null when there\n         * is no user logged in or the data of the current user were not fetched\n         * yet.\n         *\n         * @returns {Object} A User instance.\n         */\n        R.getCachedCurrent = function() {\n          var data = LoopBackAuth.currentUserData;\n          return data ? new R(data) : null;\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#isAuthenticated\n         * @methodOf lbServices.User\n         *\n         * @returns {boolean} True if the current user is authenticated (logged in).\n         */\n        R.isAuthenticated = function() {\n          return this.getCurrentId() != null;\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#getCurrentId\n         * @methodOf lbServices.User\n         *\n         * @returns {Object} Id of the currently logged-in user or null.\n         */\n        R.getCurrentId = function() {\n          return LoopBackAuth.currentUserId;\n        };\n\n    /**\n    * @ngdoc property\n    * @name lbServices.User#modelName\n    * @propertyOf lbServices.User\n    * @description\n    * The name of the model represented by this $resource,\n    * i.e. `User`.\n    */\n    R.modelName = \"User\";\n\n\n    return R;\n  }]);\n\n/**\n * @ngdoc object\n * @name lbServices.Person\n * @header lbServices.Person\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `Person` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\nmodule.factory(\n  \"Person\",\n  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {\n    var R = Resource(\n      urlBase + \"/people/:id\",\n      { 'id': '@id' },\n      {\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#create\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"create\": {\n          url: urlBase + \"/people\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#createMany\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"createMany\": {\n          isArray: true,\n          url: urlBase + \"/people\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#upsert\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"upsert\": {\n          url: urlBase + \"/people\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#exists\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Check whether a model instance exists in the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `exists` – `{boolean=}` - \n         */\n        \"exists\": {\n          url: urlBase + \"/people/:id/exists\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#findById\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Find a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         *  - `filter` – `{object=}` - Filter defining fields and include\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"findById\": {\n          url: urlBase + \"/people/:id\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#find\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Find all instances of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"find\": {\n          isArray: true,\n          url: urlBase + \"/people\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#findOne\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Find first instance of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"findOne\": {\n          url: urlBase + \"/people/findOne\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#updateAll\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        \"updateAll\": {\n          url: urlBase + \"/people/update\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#deleteById\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"deleteById\": {\n          url: urlBase + \"/people/:id\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#count\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Count instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"count\": {\n          url: urlBase + \"/people/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#prototype$updateAttributes\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Update attributes for a model instance and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"prototype$updateAttributes\": {\n          url: urlBase + \"/people/:id\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#createChangeStream\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Create a change stream.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `options` – `{object=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `changes` – `{ReadableStream=}` - \n         */\n        \"createChangeStream\": {\n          url: urlBase + \"/people/change-stream\",\n          method: \"POST\"\n        },\n      }\n    );\n\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#updateOrCreate\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        R[\"updateOrCreate\"] = R[\"upsert\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#update\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        R[\"update\"] = R[\"updateAll\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#destroyById\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#removeById\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n\n    /**\n    * @ngdoc property\n    * @name lbServices.Person#modelName\n    * @propertyOf lbServices.Person\n    * @description\n    * The name of the model represented by this $resource,\n    * i.e. `Person`.\n    */\n    R.modelName = \"Person\";\n\n\n    return R;\n  }]);\n\n/**\n * @ngdoc object\n * @name lbServices.Member\n * @header lbServices.Member\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `Member` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\nmodule.factory(\n  \"Member\",\n  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {\n    var R = Resource(\n      urlBase + \"/Members/:id\",\n      { 'id': '@id' },\n      {\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#create\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"create\": {\n          url: urlBase + \"/Members\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#createMany\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"createMany\": {\n          isArray: true,\n          url: urlBase + \"/Members\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#upsert\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"upsert\": {\n          url: urlBase + \"/Members\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#exists\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Check whether a model instance exists in the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `exists` – `{boolean=}` - \n         */\n        \"exists\": {\n          url: urlBase + \"/Members/:id/exists\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#findById\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Find a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         *  - `filter` – `{object=}` - Filter defining fields and include\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"findById\": {\n          url: urlBase + \"/Members/:id\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#find\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Find all instances of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"find\": {\n          isArray: true,\n          url: urlBase + \"/Members\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#findOne\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Find first instance of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"findOne\": {\n          url: urlBase + \"/Members/findOne\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#updateAll\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        \"updateAll\": {\n          url: urlBase + \"/Members/update\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#deleteById\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"deleteById\": {\n          url: urlBase + \"/Members/:id\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#count\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Count instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"count\": {\n          url: urlBase + \"/Members/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#prototype$updateAttributes\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Update attributes for a model instance and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"prototype$updateAttributes\": {\n          url: urlBase + \"/Members/:id\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#createChangeStream\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Create a change stream.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `options` – `{object=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `changes` – `{ReadableStream=}` - \n         */\n        \"createChangeStream\": {\n          url: urlBase + \"/Members/change-stream\",\n          method: \"POST\"\n        },\n      }\n    );\n\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#updateOrCreate\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        R[\"updateOrCreate\"] = R[\"upsert\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#update\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        R[\"update\"] = R[\"updateAll\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#destroyById\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#removeById\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n\n    /**\n    * @ngdoc property\n    * @name lbServices.Member#modelName\n    * @propertyOf lbServices.Member\n    * @description\n    * The name of the model represented by this $resource,\n    * i.e. `Member`.\n    */\n    R.modelName = \"Member\";\n\n\n    return R;\n  }]);\n\n\nmodule\n  .factory('LoopBackAuth', function() {\n    var props = ['accessTokenId', 'currentUserId', 'rememberMe'];\n    var propsPrefix = '$LoopBack$';\n\n    function LoopBackAuth() {\n      var self = this;\n      props.forEach(function(name) {\n        self[name] = load(name);\n      });\n      this.currentUserData = null;\n    }\n\n    LoopBackAuth.prototype.save = function() {\n      var self = this;\n      var storage = this.rememberMe ? localStorage : sessionStorage;\n      props.forEach(function(name) {\n        save(storage, name, self[name]);\n      });\n    };\n\n    LoopBackAuth.prototype.setUser = function(accessTokenId, userId, userData) {\n      this.accessTokenId = accessTokenId;\n      this.currentUserId = userId;\n      this.currentUserData = userData;\n    }\n\n    LoopBackAuth.prototype.clearUser = function() {\n      this.accessTokenId = null;\n      this.currentUserId = null;\n      this.currentUserData = null;\n    }\n\n    LoopBackAuth.prototype.clearStorage = function() {\n      props.forEach(function(name) {\n        save(sessionStorage, name, null);\n        save(localStorage, name, null);\n      });\n    };\n\n    return new LoopBackAuth();\n\n    // Note: LocalStorage converts the value to string\n    // We are using empty string as a marker for null/undefined values.\n    function save(storage, name, value) {\n      var key = propsPrefix + name;\n      if (value == null) value = '';\n      storage[key] = value;\n    }\n\n    function load(name) {\n      var key = propsPrefix + name;\n      return localStorage[key] || sessionStorage[key] || null;\n    }\n  })\n  .config(['$httpProvider', function($httpProvider) {\n    $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');\n  }])\n  .factory('LoopBackAuthRequestInterceptor', [ '$q', 'LoopBackAuth',\n    function($q, LoopBackAuth) {\n      return {\n        'request': function(config) {\n\n          // filter out external requests\n          var host = getHost(config.url);\n          if (host && host !== urlBaseHost) {\n            return config;\n          }\n\n          if (LoopBackAuth.accessTokenId) {\n            config.headers[authHeader] = LoopBackAuth.accessTokenId;\n          } else if (config.__isGetCurrentUser__) {\n            // Return a stub 401 error for User.getCurrent() when\n            // there is no user logged in\n            var res = {\n              body: { error: { status: 401 } },\n              status: 401,\n              config: config,\n              headers: function() { return undefined; }\n            };\n            return $q.reject(res);\n          }\n          return config || $q.when(config);\n        }\n      }\n    }])\n\n  /**\n   * @ngdoc object\n   * @name lbServices.LoopBackResourceProvider\n   * @header lbServices.LoopBackResourceProvider\n   * @description\n   * Use `LoopBackResourceProvider` to change the global configuration\n   * settings used by all models. Note that the provider is available\n   * to Configuration Blocks only, see\n   * {@link https://docs.angularjs.org/guide/module#module-loading-dependencies Module Loading & Dependencies}\n   * for more details.\n   *\n   * ## Example\n   *\n   * ```js\n   * angular.module('app')\n   *  .config(function(LoopBackResourceProvider) {\n   *     LoopBackResourceProvider.setAuthHeader('X-Access-Token');\n   *  });\n   * ```\n   */\n  .provider('LoopBackResource', function LoopBackResourceProvider() {\n    /**\n     * @ngdoc method\n     * @name lbServices.LoopBackResourceProvider#setAuthHeader\n     * @methodOf lbServices.LoopBackResourceProvider\n     * @param {string} header The header name to use, e.g. `X-Access-Token`\n     * @description\n     * Configure the REST transport to use a different header for sending\n     * the authentication token. It is sent in the `Authorization` header\n     * by default.\n     */\n    this.setAuthHeader = function(header) {\n      authHeader = header;\n    };\n\n    /**\n     * @ngdoc method\n     * @name lbServices.LoopBackResourceProvider#setUrlBase\n     * @methodOf lbServices.LoopBackResourceProvider\n     * @param {string} url The URL to use, e.g. `/api` or `//example.com/api`.\n     * @description\n     * Change the URL of the REST API server. By default, the URL provided\n     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.\n     */\n    this.setUrlBase = function(url) {\n      urlBase = url;\n      urlBaseHost = getHost(urlBase) || location.host;\n    };\n\n    /**\n     * @ngdoc method\n     * @name lbServices.LoopBackResourceProvider#getUrlBase\n     * @methodOf lbServices.LoopBackResourceProvider\n     * @description\n     * Get the URL of the REST API server. The URL provided\n     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.\n     */\n    this.getUrlBase = function() {\n      return urlBase;\n    };\n\n    this.$get = ['$resource', function($resource) {\n      return function(url, params, actions) {\n        var resource = $resource(url, params, actions);\n\n        // Angular always calls POST on $save()\n        // This hack is based on\n        // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/\n        resource.prototype.$save = function(success, error) {\n          // Fortunately, LoopBack provides a convenient `upsert` method\n          // that exactly fits our needs.\n          var result = resource.upsert.call(this, {}, this, success, error);\n          return result.$promise || result;\n        };\n        return resource;\n      };\n    }];\n  });\n\n})(window, window.angular);\n\n//# sourceMappingURL=app.concat.js.map\n\nvar turnusApp = angular\n.module('turnusApp', ['ui.router', 'ngResource', 'lbServices'])\n.config(function(LoopBackResourceProvider) {\n    LoopBackResourceProvider.setUrlBase('https://turnus-server.herokuapp.com/api')\n  });\n\nvar turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")});angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member);$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular);var turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")});angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member);$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular);var turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")}),turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")});angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member),$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData;\n},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular);var turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")});angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member),$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular),angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member);$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular);var turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")}),turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")});angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member),$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{\nurl:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular);var turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")});angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member),$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular);var turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")}),turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")});angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member),$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular);var turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")});angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member),$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){\nvar R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular),angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member),$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular),angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member);$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular);var turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")}),turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")});angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member),$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){\nreturn LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular);var turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")});angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member),$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular);var turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")}),turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")});angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member),$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular);var turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")});angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member),$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",\nmethod:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular),angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member),$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular);var turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")}),turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")});angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member),$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular);var turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")});angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member),$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id\n}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular);var turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")}),turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")});angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member),$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular);var turnusApp=angular.module(\"turnusApp\",[\"ui.router\",\"ngResource\",\"lbServices\"]).config(function(LoopBackResourceProvider){LoopBackResourceProvider.setUrlBase(\"https://turnus-server.herokuapp.com/api\")});angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member),$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular),angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,\n$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member),$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular),angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member),$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular),angular.module(\"turnusApp\").controller(\"mainCtrl\",function($scope,Member){function getMembers(){$scope.members=Member.find()}function clearInput(){$scope.member={firstname:\"\",lastname:\"\",position:\"\"}}$scope.reset=function(){for(var i=0;i<$scope.members.length;i++)$scope.members[i].available1=!0,$scope.members[i].available2=!0,$scope.members[i].available3=!0,$scope.members[i].available4=!0,$scope.members[i].available5=!0,$scope.members[i].chosen1=!1,$scope.members[i].chosen2=!1,$scope.members[i].chosen3=!1,$scope.members[i].chosen4=!1,$scope.members[i].chosen5=!1,$scope.members[i].$save(),console.log(\"Reset\")},$scope.selectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available1&&($scope.members[i].chosen1=!0,$scope.members[i].$save())},$scope.unselectAll1=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen1&&($scope.members[i].chosen1=!1,$scope.members[i].$save())},$scope.selectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available2&&($scope.members[i].chosen2=!0,$scope.members[i].$save())},$scope.unselectAll2=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen2&&($scope.members[i].chosen2=!1,$scope.members[i].$save())},$scope.selectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available3&&($scope.members[i].chosen3=!0,$scope.members[i].$save())},$scope.unselectAll3=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen3&&($scope.members[i].chosen3=!1,$scope.members[i].$save())},$scope.selectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available4&&($scope.members[i].chosen4=!0,$scope.members[i].$save())},$scope.unselectAll4=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen4&&($scope.members[i].chosen4=!1,$scope.members[i].$save())},$scope.selectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].available5&&($scope.members[i].chosen5=!0,$scope.members[i].$save())},$scope.unselectAll5=function(){for(var i=0;i<$scope.members.length;i++)1==$scope.members[i].chosen5&&($scope.members[i].chosen5=!1,$scope.members[i].$save())},$scope.available1=function(){this.member.available1=!this.member.available1,this.member.$save()},$scope.available2=function(){this.member.available2=!this.member.available2,this.member.$save()},$scope.available3=function(){this.member.available3=!this.member.available3,this.member.$save()},$scope.available4=function(){this.member.available4=!this.member.available4,this.member.$save()},$scope.available5=function(){this.member.available5=!this.member.available5,this.member.$save()},$scope.chosen1=function(){this.member.chosen1=!this.member.chosen1,this.member.$save()},$scope.chosen2=function(){this.member.chosen2=!this.member.chosen2,this.member.$save()},$scope.chosen3=function(){this.member.chosen3=!this.member.chosen3,this.member.$save()},$scope.chosen4=function(){this.member.chosen4=!this.member.chosen4,this.member.$save()},$scope.chosen5=function(){this.member.chosen5=!this.member.chosen5,this.member.$save()},$scope.addMember=function(){Member.create($scope.member);$scope.members.push(Member),getMembers(),clearInput()},$scope.removeMember=function(){Member.deleteById({id:this.member.id}).$promise.then(function(){getMembers()})},getMembers()}),turnusApp.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/home\"),$stateProvider.state(\"home\",{url:\"/home\",templateUrl:\"views/home.html\",controller:\"mainCtrl\"}).state(\"turnus\",{url:\"/turnus\",templateUrl:\"views/turnus.html\",controller:\"mainCtrl\"}).state(\"workers\",{url:\"/workers\",templateUrl:\"views/workers.html\",controller:\"mainCtrl\"})}),function(window,angular,undefined){\"use strict\";function getHost(url){var m=url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);return m?m[1]:null}var urlBase=\"/api\",authHeader=\"authorization\",urlBaseHost=getHost(urlBase)||location.host,module=angular.module(\"lbServices\",[\"ngResource\"]);module.factory(\"User\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Users/:id\",{id:\"@id\"},{prototype$__findById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"GET\"},prototype$__destroyById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"DELETE\"},prototype$__updateById__accessTokens:{params:{fk:\"@fk\"},url:urlBase+\"/Users/:id/accessTokens/:fk\",method:\"PUT\"},prototype$__get__accessTokens:{isArray:!0,url:urlBase+\"/Users/:id/accessTokens\",method:\"GET\"},prototype$__create__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"POST\"},prototype$__delete__accessTokens:{url:urlBase+\"/Users/:id/accessTokens\",method:\"DELETE\"},prototype$__count__accessTokens:{url:urlBase+\"/Users/:id/accessTokens/count\",method:\"GET\"},create:{url:urlBase+\"/Users\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Users\",method:\"POST\"},upsert:{url:urlBase+\"/Users\",method:\"PUT\"},exists:{url:urlBase+\"/Users/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Users/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Users\",method:\"GET\"},findOne:{url:urlBase+\"/Users/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Users/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Users/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Users/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Users/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Users/change-stream\",method:\"POST\"},login:{params:{include:\"user\"},interceptor:{response:function(response){var accessToken=response.data;return LoopBackAuth.setUser(accessToken.id,accessToken.userId,accessToken.user),LoopBackAuth.rememberMe=response.config.params.rememberMe!==!1,LoopBackAuth.save(),response.resource}},url:urlBase+\"/Users/login\",method:\"POST\"},logout:{interceptor:{response:function(response){return LoopBackAuth.clearUser(),LoopBackAuth.clearStorage(),response.resource}},url:urlBase+\"/Users/logout\",method:\"POST\"},confirm:{url:urlBase+\"/Users/confirm\",method:\"GET\"},resetPassword:{url:urlBase+\"/Users/reset\",method:\"POST\"},getCurrent:{url:urlBase+\"/Users/:id\",method:\"GET\",params:{id:function(){var id=LoopBackAuth.currentUserId;return null==id&&(id=\"__anonymous__\"),id}},interceptor:{response:function(response){return LoopBackAuth.currentUserData=response.data,response.resource}},__isGetCurrentUser__:!0}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.getCachedCurrent=function(){var data=LoopBackAuth.currentUserData;return data?new R(data):null},R.isAuthenticated=function(){return null!=this.getCurrentId()},R.getCurrentId=function(){return LoopBackAuth.currentUserId},R.modelName=\"User\",R}]),module.factory(\"Person\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/people/:id\",{id:\"@id\"},{create:{url:urlBase+\"/people\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/people\",method:\"POST\"},upsert:{url:urlBase+\"/people\",method:\"PUT\"},exists:{url:urlBase+\"/people/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/people/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/people\",method:\"GET\"},findOne:{url:urlBase+\"/people/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/people/update\",method:\"POST\"},deleteById:{url:urlBase+\"/people/:id\",method:\"DELETE\"},count:{url:urlBase+\"/people/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/people/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/people/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Person\",R}]),module.factory(\"Member\",[\"LoopBackResource\",\"LoopBackAuth\",\"$injector\",function(Resource,LoopBackAuth,$injector){var R=Resource(urlBase+\"/Members/:id\",{id:\"@id\"},{create:{url:urlBase+\"/Members\",method:\"POST\"},createMany:{isArray:!0,url:urlBase+\"/Members\",method:\"POST\"},upsert:{url:urlBase+\"/Members\",method:\"PUT\"},exists:{url:urlBase+\"/Members/:id/exists\",method:\"GET\"},findById:{url:urlBase+\"/Members/:id\",method:\"GET\"},find:{isArray:!0,url:urlBase+\"/Members\",method:\"GET\"},findOne:{url:urlBase+\"/Members/findOne\",method:\"GET\"},updateAll:{url:urlBase+\"/Members/update\",method:\"POST\"},deleteById:{url:urlBase+\"/Members/:id\",method:\"DELETE\"},count:{url:urlBase+\"/Members/count\",method:\"GET\"},prototype$updateAttributes:{url:urlBase+\"/Members/:id\",method:\"PUT\"},createChangeStream:{url:urlBase+\"/Members/change-stream\",method:\"POST\"}});return R.updateOrCreate=R.upsert,R.update=R.updateAll,R.destroyById=R.deleteById,R.removeById=R.deleteById,R.modelName=\"Member\",R}]),module.factory(\"LoopBackAuth\",function(){function LoopBackAuth(){var self=this;props.forEach(function(name){self[name]=load(name)}),this.currentUserData=null}function save(storage,name,value){var key=propsPrefix+name;null==value&&(value=\"\"),storage[key]=value}function load(name){var key=propsPrefix+name;return localStorage[key]||sessionStorage[key]||null}var props=[\"accessTokenId\",\"currentUserId\",\"rememberMe\"],propsPrefix=\"$LoopBack$\";return LoopBackAuth.prototype.save=function(){var self=this,storage=this.rememberMe?localStorage:sessionStorage;props.forEach(function(name){save(storage,name,self[name])})},LoopBackAuth.prototype.setUser=function(accessTokenId,userId,userData){this.accessTokenId=accessTokenId,this.currentUserId=userId,this.currentUserData=userData},LoopBackAuth.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},LoopBackAuth.prototype.clearStorage=function(){props.forEach(function(name){save(sessionStorage,name,null),save(localStorage,name,null)})},new LoopBackAuth}).config([\"$httpProvider\",function($httpProvider){$httpProvider.interceptors.push(\"LoopBackAuthRequestInterceptor\")}]).factory(\"LoopBackAuthRequestInterceptor\",[\"$q\",\"LoopBackAuth\",function($q,LoopBackAuth){return{request:function(config){var host=getHost(config.url);if(host&&host!==urlBaseHost)return config;if(LoopBackAuth.accessTokenId)config.headers[authHeader]=LoopBackAuth.accessTokenId;else if(config.__isGetCurrentUser__){var res={body:{error:{status:401}},status:401,config:config,headers:function(){return undefined}};return $q.reject(res)}return config||$q.when(config)}}}]).provider(\"LoopBackResource\",function(){this.setAuthHeader=function(header){authHeader=header},this.setUrlBase=function(url){urlBase=url,urlBaseHost=getHost(urlBase)||location.host},this.getUrlBase=function(){return urlBase},this.$get=[\"$resource\",function($resource){return function(url,params,actions){var resource=$resource(url,params,actions);return resource.prototype.$save=function(success,error){var result=resource.upsert.call(this,{},this,success,error);return result.$promise||result},resource}}]})}(window,window.angular);\n'use strict';\r\n\r\nangular.module('turnusApp')\r\n  .controller('mainCtrl', function($scope, Member) {\r\n    function getMembers() {\r\n      $scope.members = Member.find();\r\n    }\r\n\r\n    //Reset data\r\n    $scope.reset = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        $scope.members[i].available1 = true;\r\n        $scope.members[i].available2 = true;\r\n        $scope.members[i].available3 = true;\r\n        $scope.members[i].available4 = true;\r\n        $scope.members[i].available5 = true;\r\n        $scope.members[i].chosen1 = false;\r\n        $scope.members[i].chosen2 = false;\r\n        $scope.members[i].chosen3 = false;\r\n        $scope.members[i].chosen4 = false;\r\n        $scope.members[i].chosen5 = false;\r\n        $scope.members[i].$save();\r\n        console.log('Reset')\r\n      }\r\n    }\r\n\r\n    //Select all available for event\r\n    $scope.selectAll1 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].available1 == true) {\r\n          $scope.members[i].chosen1 = true;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.unselectAll1 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].chosen1 == true) {\r\n          $scope.members[i].chosen1 = false;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.selectAll2 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].available2 == true) {\r\n          $scope.members[i].chosen2 = true;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.unselectAll2 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].chosen2 == true) {\r\n          $scope.members[i].chosen2 = false;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.selectAll3 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].available3 == true) {\r\n          $scope.members[i].chosen3 = true;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.unselectAll3 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].chosen3 == true) {\r\n          $scope.members[i].chosen3 = false;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.selectAll4 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].available4 == true) {\r\n          $scope.members[i].chosen4 = true;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.unselectAll4 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].chosen4 == true) {\r\n          $scope.members[i].chosen4 = false;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.selectAll5 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].available5 == true) {\r\n          $scope.members[i].chosen5 = true;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.unselectAll5 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].chosen5 == true) {\r\n          $scope.members[i].chosen5 = false;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    //Select not available\r\n    $scope.available1 = function available() {\r\n      this.member.available1 = !this.member.available1;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.available2 = function available() {\r\n      this.member.available2 = !this.member.available2;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.available3 = function available() {\r\n      this.member.available3 = !this.member.available3;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.available4 = function available() {\r\n      this.member.available4 = !this.member.available4;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.available5 = function available() {\r\n      this.member.available5 = !this.member.available5;\r\n      this.member.$save();\r\n    }\r\n\r\n    //Select people for event\r\n\r\n    $scope.chosen1 = function available() {\r\n      this.member.chosen1 = !this.member.chosen1;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.chosen2 = function available() {\r\n      this.member.chosen2 = !this.member.chosen2;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.chosen3 = function available() {\r\n      this.member.chosen3 = !this.member.chosen3;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.chosen4 = function available() {\r\n      this.member.chosen4 = !this.member.chosen4;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.chosen5 = function available() {\r\n      this.member.chosen5 = !this.member.chosen5;\r\n      this.member.$save();\r\n    }\r\n\r\n    //Clears the input fields on workers\r\n    function clearInput() {\r\n      $scope.member = {\r\n        firstname: '',\r\n        lastname: '',\r\n        position: ''\r\n      };\r\n    }\r\n\r\n\r\n    $scope.addMember = function addMember() {\r\n      var member = Member.create($scope.member);\r\n      $scope.members.push(Member)\r\n      getMembers();\r\n      clearInput();\r\n    }\r\n\r\n    $scope.removeMember = function removeMember() {\r\n      Member.deleteById({\r\n          id: this.member.id\r\n        })\r\n        .$promise\r\n        .then(function() {\r\n          getMembers();\r\n        });\r\n    }\r\n\r\n    //TODO updateMember\r\n    getMembers();\r\n\r\n  });\r\n\nturnusApp.config(function ($stateProvider, $urlRouterProvider) {\r\n\r\n  // For any unmatched url, redirect to /home\r\n $urlRouterProvider.otherwise(\"/home\");\r\n\r\n $stateProvider\r\n   .state('home', {\r\n     url: \"/home\",\r\n     templateUrl: \"views/home.html\",\r\n     controller: \"mainCtrl\"\r\n   })\r\n   .state('turnus', {\r\n     url: \"/turnus\",\r\n     templateUrl: \"views/turnus.html\",\r\n     controller: \"mainCtrl\"\r\n   })\r\n   .state('workers', {\r\n     url: \"/workers\",\r\n     templateUrl: \"views/workers.html\",\r\n     controller: \"mainCtrl\"\r\n   })\r\n});\r\n\n(function(window, angular, undefined) {'use strict';\n\nvar urlBase = \"/api\";\nvar authHeader = 'authorization';\n\nfunction getHost(url) {\n  var m = url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);\n  return m ? m[1] : null;\n}\n\nvar urlBaseHost = getHost(urlBase) || location.host;\n\n/**\n * @ngdoc overview\n * @name lbServices\n * @module\n * @description\n *\n * The `lbServices` module provides services for interacting with\n * the models exposed by the LoopBack server via the REST API.\n *\n */\nvar module = angular.module(\"lbServices\", ['ngResource']);\n\n/**\n * @ngdoc object\n * @name lbServices.User\n * @header lbServices.User\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `User` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\nmodule.factory(\n  \"User\",\n  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {\n    var R = Resource(\n      urlBase + \"/Users/:id\",\n      { 'id': '@id' },\n      {\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__findById__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find a related item by id for accessTokens.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `fk` – `{*}` - Foreign key for accessTokens\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__findById__accessTokens\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Users/:id/accessTokens/:fk\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__destroyById__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a related item by id for accessTokens.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `fk` – `{*}` - Foreign key for accessTokens\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"prototype$__destroyById__accessTokens\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Users/:id/accessTokens/:fk\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__updateById__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update a related item by id for accessTokens.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `fk` – `{*}` - Foreign key for accessTokens\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__updateById__accessTokens\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Users/:id/accessTokens/:fk\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__get__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Queries accessTokens of User.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `filter` – `{object=}` - \n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__get__accessTokens\": {\n          isArray: true,\n          url: urlBase + \"/Users/:id/accessTokens\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__create__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Creates a new instance in accessTokens of this model.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__create__accessTokens\": {\n          url: urlBase + \"/Users/:id/accessTokens\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__delete__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Deletes all accessTokens of this model.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"prototype$__delete__accessTokens\": {\n          url: urlBase + \"/Users/:id/accessTokens\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__count__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Counts accessTokens of User.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"prototype$__count__accessTokens\": {\n          url: urlBase + \"/Users/:id/accessTokens/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#create\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"create\": {\n          url: urlBase + \"/Users\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#createMany\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"createMany\": {\n          isArray: true,\n          url: urlBase + \"/Users\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#upsert\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"upsert\": {\n          url: urlBase + \"/Users\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#exists\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Check whether a model instance exists in the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `exists` – `{boolean=}` - \n         */\n        \"exists\": {\n          url: urlBase + \"/Users/:id/exists\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#findById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         *  - `filter` – `{object=}` - Filter defining fields and include\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"findById\": {\n          url: urlBase + \"/Users/:id\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#find\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find all instances of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"find\": {\n          isArray: true,\n          url: urlBase + \"/Users\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#findOne\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find first instance of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"findOne\": {\n          url: urlBase + \"/Users/findOne\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#updateAll\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        \"updateAll\": {\n          url: urlBase + \"/Users/update\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#deleteById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"deleteById\": {\n          url: urlBase + \"/Users/:id\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#count\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Count instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"count\": {\n          url: urlBase + \"/Users/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$updateAttributes\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update attributes for a model instance and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$updateAttributes\": {\n          url: urlBase + \"/Users/:id\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#createChangeStream\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Create a change stream.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `options` – `{object=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `changes` – `{ReadableStream=}` - \n         */\n        \"createChangeStream\": {\n          url: urlBase + \"/Users/change-stream\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#login\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Login a user with username/email and password.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.\n         *   Default value: `user`.\n         *\n         *  - `rememberMe` - `boolean` - Whether the authentication credentials\n         *     should be remembered in localStorage across app/browser restarts.\n         *     Default: `true`.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The response body contains properties of the AccessToken created on login.\n         * Depending on the value of `include` parameter, the body may contain additional properties:\n         * \n         *   - `user` - `{User}` - Data of the currently logged in user. (`include=user`)\n         * \n         *\n         */\n        \"login\": {\n          params: {\n            include: \"user\"\n          },\n          interceptor: {\n            response: function(response) {\n              var accessToken = response.data;\n              LoopBackAuth.setUser(accessToken.id, accessToken.userId, accessToken.user);\n              LoopBackAuth.rememberMe = response.config.params.rememberMe !== false;\n              LoopBackAuth.save();\n              return response.resource;\n            }\n          },\n          url: urlBase + \"/Users/login\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#logout\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Logout a user with access token.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"logout\": {\n          interceptor: {\n            response: function(response) {\n              LoopBackAuth.clearUser();\n              LoopBackAuth.clearStorage();\n              return response.resource;\n            }\n          },\n          url: urlBase + \"/Users/logout\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#confirm\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Confirm a user registration with email verification token.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `uid` – `{string}` - \n         *\n         *  - `token` – `{string}` - \n         *\n         *  - `redirect` – `{string=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"confirm\": {\n          url: urlBase + \"/Users/confirm\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#resetPassword\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Reset password for a user with email.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"resetPassword\": {\n          url: urlBase + \"/Users/reset\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#getCurrent\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Get data of the currently logged user. Fail with HTTP result 401\n         * when there is no user logged in.\n         *\n         * @param {function(Object,Object)=} successCb\n         *    Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *    `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         */\n        \"getCurrent\": {\n           url: urlBase + \"/Users\" + \"/:id\",\n           method: \"GET\",\n           params: {\n             id: function() {\n              var id = LoopBackAuth.currentUserId;\n              if (id == null) id = '__anonymous__';\n              return id;\n            },\n          },\n          interceptor: {\n            response: function(response) {\n              LoopBackAuth.currentUserData = response.data;\n              return response.resource;\n            }\n          },\n          __isGetCurrentUser__ : true\n        }\n      }\n    );\n\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#updateOrCreate\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        R[\"updateOrCreate\"] = R[\"upsert\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#update\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        R[\"update\"] = R[\"updateAll\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#destroyById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#removeById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#getCachedCurrent\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Get data of the currently logged user that was returned by the last\n         * call to {@link lbServices.User#login} or\n         * {@link lbServices.User#getCurrent}. Return null when there\n         * is no user logged in or the data of the current user were not fetched\n         * yet.\n         *\n         * @returns {Object} A User instance.\n         */\n        R.getCachedCurrent = function() {\n          var data = LoopBackAuth.currentUserData;\n          return data ? new R(data) : null;\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#isAuthenticated\n         * @methodOf lbServices.User\n         *\n         * @returns {boolean} True if the current user is authenticated (logged in).\n         */\n        R.isAuthenticated = function() {\n          return this.getCurrentId() != null;\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#getCurrentId\n         * @methodOf lbServices.User\n         *\n         * @returns {Object} Id of the currently logged-in user or null.\n         */\n        R.getCurrentId = function() {\n          return LoopBackAuth.currentUserId;\n        };\n\n    /**\n    * @ngdoc property\n    * @name lbServices.User#modelName\n    * @propertyOf lbServices.User\n    * @description\n    * The name of the model represented by this $resource,\n    * i.e. `User`.\n    */\n    R.modelName = \"User\";\n\n\n    return R;\n  }]);\n\n/**\n * @ngdoc object\n * @name lbServices.Person\n * @header lbServices.Person\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `Person` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\nmodule.factory(\n  \"Person\",\n  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {\n    var R = Resource(\n      urlBase + \"/people/:id\",\n      { 'id': '@id' },\n      {\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#create\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"create\": {\n          url: urlBase + \"/people\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#createMany\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"createMany\": {\n          isArray: true,\n          url: urlBase + \"/people\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#upsert\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"upsert\": {\n          url: urlBase + \"/people\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#exists\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Check whether a model instance exists in the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `exists` – `{boolean=}` - \n         */\n        \"exists\": {\n          url: urlBase + \"/people/:id/exists\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#findById\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Find a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         *  - `filter` – `{object=}` - Filter defining fields and include\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"findById\": {\n          url: urlBase + \"/people/:id\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#find\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Find all instances of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"find\": {\n          isArray: true,\n          url: urlBase + \"/people\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#findOne\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Find first instance of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"findOne\": {\n          url: urlBase + \"/people/findOne\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#updateAll\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        \"updateAll\": {\n          url: urlBase + \"/people/update\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#deleteById\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"deleteById\": {\n          url: urlBase + \"/people/:id\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#count\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Count instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"count\": {\n          url: urlBase + \"/people/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#prototype$updateAttributes\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Update attributes for a model instance and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"prototype$updateAttributes\": {\n          url: urlBase + \"/people/:id\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#createChangeStream\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Create a change stream.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `options` – `{object=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `changes` – `{ReadableStream=}` - \n         */\n        \"createChangeStream\": {\n          url: urlBase + \"/people/change-stream\",\n          method: \"POST\"\n        },\n      }\n    );\n\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#updateOrCreate\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        R[\"updateOrCreate\"] = R[\"upsert\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#update\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        R[\"update\"] = R[\"updateAll\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#destroyById\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#removeById\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n\n    /**\n    * @ngdoc property\n    * @name lbServices.Person#modelName\n    * @propertyOf lbServices.Person\n    * @description\n    * The name of the model represented by this $resource,\n    * i.e. `Person`.\n    */\n    R.modelName = \"Person\";\n\n\n    return R;\n  }]);\n\n/**\n * @ngdoc object\n * @name lbServices.Member\n * @header lbServices.Member\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `Member` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\nmodule.factory(\n  \"Member\",\n  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {\n    var R = Resource(\n      urlBase + \"/Members/:id\",\n      { 'id': '@id' },\n      {\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#create\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"create\": {\n          url: urlBase + \"/Members\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#createMany\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"createMany\": {\n          isArray: true,\n          url: urlBase + \"/Members\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#upsert\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"upsert\": {\n          url: urlBase + \"/Members\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#exists\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Check whether a model instance exists in the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `exists` – `{boolean=}` - \n         */\n        \"exists\": {\n          url: urlBase + \"/Members/:id/exists\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#findById\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Find a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         *  - `filter` – `{object=}` - Filter defining fields and include\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"findById\": {\n          url: urlBase + \"/Members/:id\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#find\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Find all instances of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"find\": {\n          isArray: true,\n          url: urlBase + \"/Members\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#findOne\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Find first instance of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"findOne\": {\n          url: urlBase + \"/Members/findOne\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#updateAll\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        \"updateAll\": {\n          url: urlBase + \"/Members/update\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#deleteById\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"deleteById\": {\n          url: urlBase + \"/Members/:id\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#count\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Count instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"count\": {\n          url: urlBase + \"/Members/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#prototype$updateAttributes\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Update attributes for a model instance and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"prototype$updateAttributes\": {\n          url: urlBase + \"/Members/:id\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#createChangeStream\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Create a change stream.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `options` – `{object=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `changes` – `{ReadableStream=}` - \n         */\n        \"createChangeStream\": {\n          url: urlBase + \"/Members/change-stream\",\n          method: \"POST\"\n        },\n      }\n    );\n\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#updateOrCreate\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        R[\"updateOrCreate\"] = R[\"upsert\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#update\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        R[\"update\"] = R[\"updateAll\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#destroyById\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#removeById\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n\n    /**\n    * @ngdoc property\n    * @name lbServices.Member#modelName\n    * @propertyOf lbServices.Member\n    * @description\n    * The name of the model represented by this $resource,\n    * i.e. `Member`.\n    */\n    R.modelName = \"Member\";\n\n\n    return R;\n  }]);\n\n\nmodule\n  .factory('LoopBackAuth', function() {\n    var props = ['accessTokenId', 'currentUserId', 'rememberMe'];\n    var propsPrefix = '$LoopBack$';\n\n    function LoopBackAuth() {\n      var self = this;\n      props.forEach(function(name) {\n        self[name] = load(name);\n      });\n      this.currentUserData = null;\n    }\n\n    LoopBackAuth.prototype.save = function() {\n      var self = this;\n      var storage = this.rememberMe ? localStorage : sessionStorage;\n      props.forEach(function(name) {\n        save(storage, name, self[name]);\n      });\n    };\n\n    LoopBackAuth.prototype.setUser = function(accessTokenId, userId, userData) {\n      this.accessTokenId = accessTokenId;\n      this.currentUserId = userId;\n      this.currentUserData = userData;\n    }\n\n    LoopBackAuth.prototype.clearUser = function() {\n      this.accessTokenId = null;\n      this.currentUserId = null;\n      this.currentUserData = null;\n    }\n\n    LoopBackAuth.prototype.clearStorage = function() {\n      props.forEach(function(name) {\n        save(sessionStorage, name, null);\n        save(localStorage, name, null);\n      });\n    };\n\n    return new LoopBackAuth();\n\n    // Note: LocalStorage converts the value to string\n    // We are using empty string as a marker for null/undefined values.\n    function save(storage, name, value) {\n      var key = propsPrefix + name;\n      if (value == null) value = '';\n      storage[key] = value;\n    }\n\n    function load(name) {\n      var key = propsPrefix + name;\n      return localStorage[key] || sessionStorage[key] || null;\n    }\n  })\n  .config(['$httpProvider', function($httpProvider) {\n    $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');\n  }])\n  .factory('LoopBackAuthRequestInterceptor', [ '$q', 'LoopBackAuth',\n    function($q, LoopBackAuth) {\n      return {\n        'request': function(config) {\n\n          // filter out external requests\n          var host = getHost(config.url);\n          if (host && host !== urlBaseHost) {\n            return config;\n          }\n\n          if (LoopBackAuth.accessTokenId) {\n            config.headers[authHeader] = LoopBackAuth.accessTokenId;\n          } else if (config.__isGetCurrentUser__) {\n            // Return a stub 401 error for User.getCurrent() when\n            // there is no user logged in\n            var res = {\n              body: { error: { status: 401 } },\n              status: 401,\n              config: config,\n              headers: function() { return undefined; }\n            };\n            return $q.reject(res);\n          }\n          return config || $q.when(config);\n        }\n      }\n    }])\n\n  /**\n   * @ngdoc object\n   * @name lbServices.LoopBackResourceProvider\n   * @header lbServices.LoopBackResourceProvider\n   * @description\n   * Use `LoopBackResourceProvider` to change the global configuration\n   * settings used by all models. Note that the provider is available\n   * to Configuration Blocks only, see\n   * {@link https://docs.angularjs.org/guide/module#module-loading-dependencies Module Loading & Dependencies}\n   * for more details.\n   *\n   * ## Example\n   *\n   * ```js\n   * angular.module('app')\n   *  .config(function(LoopBackResourceProvider) {\n   *     LoopBackResourceProvider.setAuthHeader('X-Access-Token');\n   *  });\n   * ```\n   */\n  .provider('LoopBackResource', function LoopBackResourceProvider() {\n    /**\n     * @ngdoc method\n     * @name lbServices.LoopBackResourceProvider#setAuthHeader\n     * @methodOf lbServices.LoopBackResourceProvider\n     * @param {string} header The header name to use, e.g. `X-Access-Token`\n     * @description\n     * Configure the REST transport to use a different header for sending\n     * the authentication token. It is sent in the `Authorization` header\n     * by default.\n     */\n    this.setAuthHeader = function(header) {\n      authHeader = header;\n    };\n\n    /**\n     * @ngdoc method\n     * @name lbServices.LoopBackResourceProvider#setUrlBase\n     * @methodOf lbServices.LoopBackResourceProvider\n     * @param {string} url The URL to use, e.g. `/api` or `//example.com/api`.\n     * @description\n     * Change the URL of the REST API server. By default, the URL provided\n     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.\n     */\n    this.setUrlBase = function(url) {\n      urlBase = url;\n      urlBaseHost = getHost(urlBase) || location.host;\n    };\n\n    /**\n     * @ngdoc method\n     * @name lbServices.LoopBackResourceProvider#getUrlBase\n     * @methodOf lbServices.LoopBackResourceProvider\n     * @description\n     * Get the URL of the REST API server. The URL provided\n     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.\n     */\n    this.getUrlBase = function() {\n      return urlBase;\n    };\n\n    this.$get = ['$resource', function($resource) {\n      return function(url, params, actions) {\n        var resource = $resource(url, params, actions);\n\n        // Angular always calls POST on $save()\n        // This hack is based on\n        // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/\n        resource.prototype.$save = function(success, error) {\n          // Fortunately, LoopBack provides a convenient `upsert` method\n          // that exactly fits our needs.\n          var result = resource.upsert.call(this, {}, this, success, error);\n          return result.$promise || result;\n        };\n        return resource;\n      };\n    }];\n  });\n\n})(window, window.angular);\n\n//# sourceMappingURL=app.concat.js.map\n","var turnusApp = angular\n.module('turnusApp', ['ui.router', 'ngResource', 'lbServices'])\n.config(function(LoopBackResourceProvider) {\n    LoopBackResourceProvider.setUrlBase('https://turnus-server.herokuapp.com/api')\n  });\n","'use strict';\r\n\r\nangular.module('turnusApp')\r\n  .controller('mainCtrl', function($scope, Member) {\r\n    function getMembers() {\r\n      $scope.members = Member.find();\r\n    }\r\n\r\n    //Reset data\r\n    $scope.reset = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        $scope.members[i].available1 = true;\r\n        $scope.members[i].available2 = true;\r\n        $scope.members[i].available3 = true;\r\n        $scope.members[i].available4 = true;\r\n        $scope.members[i].available5 = true;\r\n        $scope.members[i].chosen1 = false;\r\n        $scope.members[i].chosen2 = false;\r\n        $scope.members[i].chosen3 = false;\r\n        $scope.members[i].chosen4 = false;\r\n        $scope.members[i].chosen5 = false;\r\n        $scope.members[i].$save();\r\n        console.log('Reset')\r\n      }\r\n    }\r\n\r\n    //Select all available for event\r\n    $scope.selectAll1 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].available1 == true) {\r\n          $scope.members[i].chosen1 = true;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.unselectAll1 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].chosen1 == true) {\r\n          $scope.members[i].chosen1 = false;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.selectAll2 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].available2 == true) {\r\n          $scope.members[i].chosen2 = true;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.unselectAll2 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].chosen2 == true) {\r\n          $scope.members[i].chosen2 = false;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.selectAll3 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].available3 == true) {\r\n          $scope.members[i].chosen3 = true;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.unselectAll3 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].chosen3 == true) {\r\n          $scope.members[i].chosen3 = false;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.selectAll4 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].available4 == true) {\r\n          $scope.members[i].chosen4 = true;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.unselectAll4 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].chosen4 == true) {\r\n          $scope.members[i].chosen4 = false;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.selectAll5 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].available5 == true) {\r\n          $scope.members[i].chosen5 = true;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    $scope.unselectAll5 = function() {\r\n      for (var i = 0; i < $scope.members.length; i++) {\r\n        if ($scope.members[i].chosen5 == true) {\r\n          $scope.members[i].chosen5 = false;\r\n          $scope.members[i].$save();\r\n        }\r\n      }\r\n    }\r\n\r\n    //Select not available\r\n    $scope.available1 = function available() {\r\n      this.member.available1 = !this.member.available1;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.available2 = function available() {\r\n      this.member.available2 = !this.member.available2;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.available3 = function available() {\r\n      this.member.available3 = !this.member.available3;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.available4 = function available() {\r\n      this.member.available4 = !this.member.available4;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.available5 = function available() {\r\n      this.member.available5 = !this.member.available5;\r\n      this.member.$save();\r\n    }\r\n\r\n    //Select people for event\r\n\r\n    $scope.chosen1 = function available() {\r\n      this.member.chosen1 = !this.member.chosen1;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.chosen2 = function available() {\r\n      this.member.chosen2 = !this.member.chosen2;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.chosen3 = function available() {\r\n      this.member.chosen3 = !this.member.chosen3;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.chosen4 = function available() {\r\n      this.member.chosen4 = !this.member.chosen4;\r\n      this.member.$save();\r\n    }\r\n\r\n    $scope.chosen5 = function available() {\r\n      this.member.chosen5 = !this.member.chosen5;\r\n      this.member.$save();\r\n    }\r\n\r\n    //Clears the input fields on workers\r\n    function clearInput() {\r\n      $scope.member = {\r\n        firstname: '',\r\n        lastname: '',\r\n        position: ''\r\n      };\r\n    }\r\n\r\n\r\n    $scope.addMember = function addMember() {\r\n      var member = Member.create($scope.member);\r\n      $scope.members.push(Member)\r\n      getMembers();\r\n      clearInput();\r\n    }\r\n\r\n    $scope.removeMember = function removeMember() {\r\n      Member.deleteById({\r\n          id: this.member.id\r\n        })\r\n        .$promise\r\n        .then(function() {\r\n          getMembers();\r\n        });\r\n    }\r\n\r\n    //TODO updateMember\r\n    getMembers();\r\n\r\n  });\r\n","turnusApp.config(function ($stateProvider, $urlRouterProvider) {\r\n\r\n  // For any unmatched url, redirect to /home\r\n $urlRouterProvider.otherwise(\"/home\");\r\n\r\n $stateProvider\r\n   .state('home', {\r\n     url: \"/home\",\r\n     templateUrl: \"views/home.html\",\r\n     controller: \"mainCtrl\"\r\n   })\r\n   .state('turnus', {\r\n     url: \"/turnus\",\r\n     templateUrl: \"views/turnus.html\",\r\n     controller: \"mainCtrl\"\r\n   })\r\n   .state('workers', {\r\n     url: \"/workers\",\r\n     templateUrl: \"views/workers.html\",\r\n     controller: \"mainCtrl\"\r\n   })\r\n});\r\n","(function(window, angular, undefined) {'use strict';\n\nvar urlBase = \"/api\";\nvar authHeader = 'authorization';\n\nfunction getHost(url) {\n  var m = url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);\n  return m ? m[1] : null;\n}\n\nvar urlBaseHost = getHost(urlBase) || location.host;\n\n/**\n * @ngdoc overview\n * @name lbServices\n * @module\n * @description\n *\n * The `lbServices` module provides services for interacting with\n * the models exposed by the LoopBack server via the REST API.\n *\n */\nvar module = angular.module(\"lbServices\", ['ngResource']);\n\n/**\n * @ngdoc object\n * @name lbServices.User\n * @header lbServices.User\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `User` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\nmodule.factory(\n  \"User\",\n  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {\n    var R = Resource(\n      urlBase + \"/Users/:id\",\n      { 'id': '@id' },\n      {\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__findById__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find a related item by id for accessTokens.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `fk` – `{*}` - Foreign key for accessTokens\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__findById__accessTokens\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Users/:id/accessTokens/:fk\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__destroyById__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a related item by id for accessTokens.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `fk` – `{*}` - Foreign key for accessTokens\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"prototype$__destroyById__accessTokens\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Users/:id/accessTokens/:fk\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__updateById__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update a related item by id for accessTokens.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `fk` – `{*}` - Foreign key for accessTokens\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__updateById__accessTokens\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Users/:id/accessTokens/:fk\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__get__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Queries accessTokens of User.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `filter` – `{object=}` - \n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__get__accessTokens\": {\n          isArray: true,\n          url: urlBase + \"/Users/:id/accessTokens\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__create__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Creates a new instance in accessTokens of this model.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__create__accessTokens\": {\n          url: urlBase + \"/Users/:id/accessTokens\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__delete__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Deletes all accessTokens of this model.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"prototype$__delete__accessTokens\": {\n          url: urlBase + \"/Users/:id/accessTokens\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__count__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Counts accessTokens of User.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"prototype$__count__accessTokens\": {\n          url: urlBase + \"/Users/:id/accessTokens/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#create\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"create\": {\n          url: urlBase + \"/Users\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#createMany\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"createMany\": {\n          isArray: true,\n          url: urlBase + \"/Users\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#upsert\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"upsert\": {\n          url: urlBase + \"/Users\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#exists\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Check whether a model instance exists in the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `exists` – `{boolean=}` - \n         */\n        \"exists\": {\n          url: urlBase + \"/Users/:id/exists\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#findById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         *  - `filter` – `{object=}` - Filter defining fields and include\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"findById\": {\n          url: urlBase + \"/Users/:id\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#find\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find all instances of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"find\": {\n          isArray: true,\n          url: urlBase + \"/Users\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#findOne\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find first instance of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"findOne\": {\n          url: urlBase + \"/Users/findOne\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#updateAll\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        \"updateAll\": {\n          url: urlBase + \"/Users/update\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#deleteById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"deleteById\": {\n          url: urlBase + \"/Users/:id\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#count\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Count instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"count\": {\n          url: urlBase + \"/Users/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$updateAttributes\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update attributes for a model instance and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$updateAttributes\": {\n          url: urlBase + \"/Users/:id\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#createChangeStream\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Create a change stream.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `options` – `{object=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `changes` – `{ReadableStream=}` - \n         */\n        \"createChangeStream\": {\n          url: urlBase + \"/Users/change-stream\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#login\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Login a user with username/email and password.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.\n         *   Default value: `user`.\n         *\n         *  - `rememberMe` - `boolean` - Whether the authentication credentials\n         *     should be remembered in localStorage across app/browser restarts.\n         *     Default: `true`.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The response body contains properties of the AccessToken created on login.\n         * Depending on the value of `include` parameter, the body may contain additional properties:\n         * \n         *   - `user` - `{User}` - Data of the currently logged in user. (`include=user`)\n         * \n         *\n         */\n        \"login\": {\n          params: {\n            include: \"user\"\n          },\n          interceptor: {\n            response: function(response) {\n              var accessToken = response.data;\n              LoopBackAuth.setUser(accessToken.id, accessToken.userId, accessToken.user);\n              LoopBackAuth.rememberMe = response.config.params.rememberMe !== false;\n              LoopBackAuth.save();\n              return response.resource;\n            }\n          },\n          url: urlBase + \"/Users/login\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#logout\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Logout a user with access token.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"logout\": {\n          interceptor: {\n            response: function(response) {\n              LoopBackAuth.clearUser();\n              LoopBackAuth.clearStorage();\n              return response.resource;\n            }\n          },\n          url: urlBase + \"/Users/logout\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#confirm\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Confirm a user registration with email verification token.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `uid` – `{string}` - \n         *\n         *  - `token` – `{string}` - \n         *\n         *  - `redirect` – `{string=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"confirm\": {\n          url: urlBase + \"/Users/confirm\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#resetPassword\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Reset password for a user with email.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"resetPassword\": {\n          url: urlBase + \"/Users/reset\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#getCurrent\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Get data of the currently logged user. Fail with HTTP result 401\n         * when there is no user logged in.\n         *\n         * @param {function(Object,Object)=} successCb\n         *    Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *    `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         */\n        \"getCurrent\": {\n           url: urlBase + \"/Users\" + \"/:id\",\n           method: \"GET\",\n           params: {\n             id: function() {\n              var id = LoopBackAuth.currentUserId;\n              if (id == null) id = '__anonymous__';\n              return id;\n            },\n          },\n          interceptor: {\n            response: function(response) {\n              LoopBackAuth.currentUserData = response.data;\n              return response.resource;\n            }\n          },\n          __isGetCurrentUser__ : true\n        }\n      }\n    );\n\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#updateOrCreate\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        R[\"updateOrCreate\"] = R[\"upsert\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#update\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        R[\"update\"] = R[\"updateAll\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#destroyById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#removeById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#getCachedCurrent\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Get data of the currently logged user that was returned by the last\n         * call to {@link lbServices.User#login} or\n         * {@link lbServices.User#getCurrent}. Return null when there\n         * is no user logged in or the data of the current user were not fetched\n         * yet.\n         *\n         * @returns {Object} A User instance.\n         */\n        R.getCachedCurrent = function() {\n          var data = LoopBackAuth.currentUserData;\n          return data ? new R(data) : null;\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#isAuthenticated\n         * @methodOf lbServices.User\n         *\n         * @returns {boolean} True if the current user is authenticated (logged in).\n         */\n        R.isAuthenticated = function() {\n          return this.getCurrentId() != null;\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#getCurrentId\n         * @methodOf lbServices.User\n         *\n         * @returns {Object} Id of the currently logged-in user or null.\n         */\n        R.getCurrentId = function() {\n          return LoopBackAuth.currentUserId;\n        };\n\n    /**\n    * @ngdoc property\n    * @name lbServices.User#modelName\n    * @propertyOf lbServices.User\n    * @description\n    * The name of the model represented by this $resource,\n    * i.e. `User`.\n    */\n    R.modelName = \"User\";\n\n\n    return R;\n  }]);\n\n/**\n * @ngdoc object\n * @name lbServices.Person\n * @header lbServices.Person\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `Person` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\nmodule.factory(\n  \"Person\",\n  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {\n    var R = Resource(\n      urlBase + \"/people/:id\",\n      { 'id': '@id' },\n      {\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#create\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"create\": {\n          url: urlBase + \"/people\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#createMany\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"createMany\": {\n          isArray: true,\n          url: urlBase + \"/people\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#upsert\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"upsert\": {\n          url: urlBase + \"/people\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#exists\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Check whether a model instance exists in the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `exists` – `{boolean=}` - \n         */\n        \"exists\": {\n          url: urlBase + \"/people/:id/exists\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#findById\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Find a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         *  - `filter` – `{object=}` - Filter defining fields and include\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"findById\": {\n          url: urlBase + \"/people/:id\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#find\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Find all instances of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"find\": {\n          isArray: true,\n          url: urlBase + \"/people\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#findOne\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Find first instance of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"findOne\": {\n          url: urlBase + \"/people/findOne\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#updateAll\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        \"updateAll\": {\n          url: urlBase + \"/people/update\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#deleteById\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"deleteById\": {\n          url: urlBase + \"/people/:id\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#count\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Count instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"count\": {\n          url: urlBase + \"/people/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#prototype$updateAttributes\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Update attributes for a model instance and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        \"prototype$updateAttributes\": {\n          url: urlBase + \"/people/:id\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#createChangeStream\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Create a change stream.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `options` – `{object=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `changes` – `{ReadableStream=}` - \n         */\n        \"createChangeStream\": {\n          url: urlBase + \"/people/change-stream\",\n          method: \"POST\"\n        },\n      }\n    );\n\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#updateOrCreate\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        R[\"updateOrCreate\"] = R[\"upsert\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#update\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        R[\"update\"] = R[\"updateAll\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#destroyById\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Person#removeById\n         * @methodOf lbServices.Person\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Person` object.)\n         * </em>\n         */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n\n    /**\n    * @ngdoc property\n    * @name lbServices.Person#modelName\n    * @propertyOf lbServices.Person\n    * @description\n    * The name of the model represented by this $resource,\n    * i.e. `Person`.\n    */\n    R.modelName = \"Person\";\n\n\n    return R;\n  }]);\n\n/**\n * @ngdoc object\n * @name lbServices.Member\n * @header lbServices.Member\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `Member` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\nmodule.factory(\n  \"Member\",\n  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {\n    var R = Resource(\n      urlBase + \"/Members/:id\",\n      { 'id': '@id' },\n      {\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#create\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"create\": {\n          url: urlBase + \"/Members\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#createMany\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"createMany\": {\n          isArray: true,\n          url: urlBase + \"/Members\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#upsert\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"upsert\": {\n          url: urlBase + \"/Members\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#exists\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Check whether a model instance exists in the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `exists` – `{boolean=}` - \n         */\n        \"exists\": {\n          url: urlBase + \"/Members/:id/exists\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#findById\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Find a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         *  - `filter` – `{object=}` - Filter defining fields and include\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"findById\": {\n          url: urlBase + \"/Members/:id\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#find\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Find all instances of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"find\": {\n          isArray: true,\n          url: urlBase + \"/Members\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#findOne\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Find first instance of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"findOne\": {\n          url: urlBase + \"/Members/findOne\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#updateAll\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        \"updateAll\": {\n          url: urlBase + \"/Members/update\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#deleteById\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"deleteById\": {\n          url: urlBase + \"/Members/:id\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#count\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Count instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"count\": {\n          url: urlBase + \"/Members/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#prototype$updateAttributes\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Update attributes for a model instance and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        \"prototype$updateAttributes\": {\n          url: urlBase + \"/Members/:id\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#createChangeStream\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Create a change stream.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `options` – `{object=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `changes` – `{ReadableStream=}` - \n         */\n        \"createChangeStream\": {\n          url: urlBase + \"/Members/change-stream\",\n          method: \"POST\"\n        },\n      }\n    );\n\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#updateOrCreate\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        R[\"updateOrCreate\"] = R[\"upsert\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#update\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        R[\"update\"] = R[\"updateAll\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#destroyById\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Member#removeById\n         * @methodOf lbServices.Member\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Member` object.)\n         * </em>\n         */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n\n    /**\n    * @ngdoc property\n    * @name lbServices.Member#modelName\n    * @propertyOf lbServices.Member\n    * @description\n    * The name of the model represented by this $resource,\n    * i.e. `Member`.\n    */\n    R.modelName = \"Member\";\n\n\n    return R;\n  }]);\n\n\nmodule\n  .factory('LoopBackAuth', function() {\n    var props = ['accessTokenId', 'currentUserId', 'rememberMe'];\n    var propsPrefix = '$LoopBack$';\n\n    function LoopBackAuth() {\n      var self = this;\n      props.forEach(function(name) {\n        self[name] = load(name);\n      });\n      this.currentUserData = null;\n    }\n\n    LoopBackAuth.prototype.save = function() {\n      var self = this;\n      var storage = this.rememberMe ? localStorage : sessionStorage;\n      props.forEach(function(name) {\n        save(storage, name, self[name]);\n      });\n    };\n\n    LoopBackAuth.prototype.setUser = function(accessTokenId, userId, userData) {\n      this.accessTokenId = accessTokenId;\n      this.currentUserId = userId;\n      this.currentUserData = userData;\n    }\n\n    LoopBackAuth.prototype.clearUser = function() {\n      this.accessTokenId = null;\n      this.currentUserId = null;\n      this.currentUserData = null;\n    }\n\n    LoopBackAuth.prototype.clearStorage = function() {\n      props.forEach(function(name) {\n        save(sessionStorage, name, null);\n        save(localStorage, name, null);\n      });\n    };\n\n    return new LoopBackAuth();\n\n    // Note: LocalStorage converts the value to string\n    // We are using empty string as a marker for null/undefined values.\n    function save(storage, name, value) {\n      var key = propsPrefix + name;\n      if (value == null) value = '';\n      storage[key] = value;\n    }\n\n    function load(name) {\n      var key = propsPrefix + name;\n      return localStorage[key] || sessionStorage[key] || null;\n    }\n  })\n  .config(['$httpProvider', function($httpProvider) {\n    $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');\n  }])\n  .factory('LoopBackAuthRequestInterceptor', [ '$q', 'LoopBackAuth',\n    function($q, LoopBackAuth) {\n      return {\n        'request': function(config) {\n\n          // filter out external requests\n          var host = getHost(config.url);\n          if (host && host !== urlBaseHost) {\n            return config;\n          }\n\n          if (LoopBackAuth.accessTokenId) {\n            config.headers[authHeader] = LoopBackAuth.accessTokenId;\n          } else if (config.__isGetCurrentUser__) {\n            // Return a stub 401 error for User.getCurrent() when\n            // there is no user logged in\n            var res = {\n              body: { error: { status: 401 } },\n              status: 401,\n              config: config,\n              headers: function() { return undefined; }\n            };\n            return $q.reject(res);\n          }\n          return config || $q.when(config);\n        }\n      }\n    }])\n\n  /**\n   * @ngdoc object\n   * @name lbServices.LoopBackResourceProvider\n   * @header lbServices.LoopBackResourceProvider\n   * @description\n   * Use `LoopBackResourceProvider` to change the global configuration\n   * settings used by all models. Note that the provider is available\n   * to Configuration Blocks only, see\n   * {@link https://docs.angularjs.org/guide/module#module-loading-dependencies Module Loading & Dependencies}\n   * for more details.\n   *\n   * ## Example\n   *\n   * ```js\n   * angular.module('app')\n   *  .config(function(LoopBackResourceProvider) {\n   *     LoopBackResourceProvider.setAuthHeader('X-Access-Token');\n   *  });\n   * ```\n   */\n  .provider('LoopBackResource', function LoopBackResourceProvider() {\n    /**\n     * @ngdoc method\n     * @name lbServices.LoopBackResourceProvider#setAuthHeader\n     * @methodOf lbServices.LoopBackResourceProvider\n     * @param {string} header The header name to use, e.g. `X-Access-Token`\n     * @description\n     * Configure the REST transport to use a different header for sending\n     * the authentication token. It is sent in the `Authorization` header\n     * by default.\n     */\n    this.setAuthHeader = function(header) {\n      authHeader = header;\n    };\n\n    /**\n     * @ngdoc method\n     * @name lbServices.LoopBackResourceProvider#setUrlBase\n     * @methodOf lbServices.LoopBackResourceProvider\n     * @param {string} url The URL to use, e.g. `/api` or `//example.com/api`.\n     * @description\n     * Change the URL of the REST API server. By default, the URL provided\n     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.\n     */\n    this.setUrlBase = function(url) {\n      urlBase = url;\n      urlBaseHost = getHost(urlBase) || location.host;\n    };\n\n    /**\n     * @ngdoc method\n     * @name lbServices.LoopBackResourceProvider#getUrlBase\n     * @methodOf lbServices.LoopBackResourceProvider\n     * @description\n     * Get the URL of the REST API server. The URL provided\n     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.\n     */\n    this.getUrlBase = function() {\n      return urlBase;\n    };\n\n    this.$get = ['$resource', function($resource) {\n      return function(url, params, actions) {\n        var resource = $resource(url, params, actions);\n\n        // Angular always calls POST on $save()\n        // This hack is based on\n        // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/\n        resource.prototype.$save = function(success, error) {\n          // Fortunately, LoopBack provides a convenient `upsert` method\n          // that exactly fits our needs.\n          var result = resource.upsert.call(this, {}, this, success, error);\n          return result.$promise || result;\n        };\n        return resource;\n      };\n    }];\n  });\n\n})(window, window.angular);\n"],"sourceRoot":"/source/"}